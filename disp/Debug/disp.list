
disp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a8c  08004a8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a8c  08004a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a94  08004a94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08004b0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004b0c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fc7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fd  00000000  00000000  00031067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00033268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000340d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015bd1  00000000  00000000  00034e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffaf  00000000  00000000  0004aa69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee18  00000000  00000000  0005aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c0  00000000  00000000  000e9884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049b4 	.word	0x080049b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080049b4 	.word	0x080049b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <ILI9341_Select+0x14>)
 8000592:	f001 fd35 	bl	8002000 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40020000 	.word	0x40020000

080005a0 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <ILI9341_Unselect+0x14>)
 80005aa:	f001 fd29 	bl	8002000 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020000 	.word	0x40020000

080005b8 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <ILI9341_Reset+0x24>)
 80005c2:	f001 fd1d 	bl	8002000 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80005c6:	2005      	movs	r0, #5
 80005c8:	f001 f990 	bl	80018ec <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <ILI9341_Reset+0x24>)
 80005d2:	f001 fd15 	bl	8002000 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40020800 	.word	0x40020800

080005e0 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	4807      	ldr	r0, [pc, #28]	; (800060c <ILI9341_WriteCommand+0x2c>)
 80005f0:	f001 fd06 	bl	8002000 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005f4:	1df9      	adds	r1, r7, #7
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2201      	movs	r2, #1
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <ILI9341_WriteCommand+0x30>)
 80005fe:	f002 fa3e 	bl	8002a7e <HAL_SPI_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40020000 	.word	0x40020000
 8000610:	20000098 	.word	0x20000098

08000614 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	4811      	ldr	r0, [pc, #68]	; (8000668 <ILI9341_WriteData+0x54>)
 8000624:	f001 fcec 	bl	8002000 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000628:	e015      	b.n	8000656 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000630:	bf28      	it	cs
 8000632:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8000636:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000638:	89fa      	ldrh	r2, [r7, #14]
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <ILI9341_WriteData+0x58>)
 8000642:	f002 fa1c 	bl	8002a7e <HAL_SPI_Transmit>
        buff += chunk_size;
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1e6      	bne.n	800062a <ILI9341_WriteData+0x16>
    }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40020000 	.word	0x40020000
 800066c:	20000098 	.word	0x20000098

08000670 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4604      	mov	r4, r0
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	461a      	mov	r2, r3
 800067e:	4623      	mov	r3, r4
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	4603      	mov	r3, r0
 8000684:	80bb      	strh	r3, [r7, #4]
 8000686:	460b      	mov	r3, r1
 8000688:	807b      	strh	r3, [r7, #2]
 800068a:	4613      	mov	r3, r2
 800068c:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800068e:	202a      	movs	r0, #42	; 0x2a
 8000690:	f7ff ffa6 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	733b      	strb	r3, [r7, #12]
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	737b      	strb	r3, [r7, #13]
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffaa 	bl	8000614 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 80006c0:	202b      	movs	r0, #43	; 0x2b
 80006c2:	f7ff ff8d 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	723b      	strb	r3, [r7, #8]
 80006d0:	88bb      	ldrh	r3, [r7, #4]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	727b      	strb	r3, [r7, #9]
 80006d6:	883b      	ldrh	r3, [r7, #0]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	72bb      	strb	r3, [r7, #10]
 80006e0:	883b      	ldrh	r3, [r7, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2104      	movs	r1, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff91 	bl	8000614 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80006f2:	202c      	movs	r0, #44	; 0x2c
 80006f4:	f7ff ff74 	bl	80005e0 <ILI9341_WriteCommand>
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd90      	pop	{r4, r7, pc}

08000700 <ILI9341_Init>:

void ILI9341_Init() {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b09b      	sub	sp, #108	; 0x6c
 8000704:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000706:	f7ff ff3f 	bl	8000588 <ILI9341_Select>
    ILI9341_Reset();
 800070a:	f7ff ff55 	bl	80005b8 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff ff66 	bl	80005e0 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000718:	f001 f8e8 	bl	80018ec <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 800071c:	20cb      	movs	r0, #203	; 0xcb
 800071e:	f7ff ff5f 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000722:	4a87      	ldr	r2, [pc, #540]	; (8000940 <ILI9341_Init+0x240>)
 8000724:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072c:	6018      	str	r0, [r3, #0]
 800072e:	3304      	adds	r3, #4
 8000730:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000732:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff6b 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800073e:	20cf      	movs	r0, #207	; 0xcf
 8000740:	f7ff ff4e 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000744:	4a7f      	ldr	r2, [pc, #508]	; (8000944 <ILI9341_Init+0x244>)
 8000746:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	8019      	strh	r1, [r3, #0]
 8000750:	3302      	adds	r3, #2
 8000752:	0c12      	lsrs	r2, r2, #16
 8000754:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000756:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800075a:	2103      	movs	r1, #3
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff59 	bl	8000614 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000762:	20e8      	movs	r0, #232	; 0xe8
 8000764:	f7ff ff3c 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000768:	4a77      	ldr	r2, [pc, #476]	; (8000948 <ILI9341_Init+0x248>)
 800076a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800076e:	6812      	ldr	r2, [r2, #0]
 8000770:	4611      	mov	r1, r2
 8000772:	8019      	strh	r1, [r3, #0]
 8000774:	3302      	adds	r3, #2
 8000776:	0c12      	lsrs	r2, r2, #16
 8000778:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800077a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800077e:	2103      	movs	r1, #3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff47 	bl	8000614 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000786:	20ea      	movs	r0, #234	; 0xea
 8000788:	f7ff ff2a 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 800078c:	2300      	movs	r3, #0
 800078e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000792:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000796:	2102      	movs	r1, #2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff3b 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800079e:	20ed      	movs	r0, #237	; 0xed
 80007a0:	f7ff ff1e 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80007a4:	4b69      	ldr	r3, [pc, #420]	; (800094c <ILI9341_Init+0x24c>)
 80007a6:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 80007a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ac:	2104      	movs	r1, #4
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff30 	bl	8000614 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 80007b4:	20f7      	movs	r0, #247	; 0xf7
 80007b6:	f7ff ff13 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 80007ba:	2320      	movs	r3, #32
 80007bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 80007c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff24 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 80007cc:	20c0      	movs	r0, #192	; 0xc0
 80007ce:	f7ff ff07 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 80007d2:	2323      	movs	r3, #35	; 0x23
 80007d4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 80007d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff18 	bl	8000614 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 80007e4:	20c1      	movs	r0, #193	; 0xc1
 80007e6:	f7ff fefb 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 80007ea:	2310      	movs	r3, #16
 80007ec:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 80007f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff0c 	bl	8000614 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80007fc:	20c5      	movs	r0, #197	; 0xc5
 80007fe:	f7ff feef 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000802:	f642 033e 	movw	r3, #10302	; 0x283e
 8000806:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 800080a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800080e:	2102      	movs	r1, #2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff feff 	bl	8000614 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000816:	20c7      	movs	r0, #199	; 0xc7
 8000818:	f7ff fee2 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 800081c:	2386      	movs	r3, #134	; 0x86
 800081e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000822:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fef3 	bl	8000614 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800082e:	2036      	movs	r0, #54	; 0x36
 8000830:	f7ff fed6 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000834:	2348      	movs	r3, #72	; 0x48
 8000836:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 800083a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083e:	2101      	movs	r1, #1
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fee7 	bl	8000614 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000846:	203a      	movs	r0, #58	; 0x3a
 8000848:	f7ff feca 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 800084c:	2355      	movs	r3, #85	; 0x55
 800084e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000852:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000856:	2101      	movs	r1, #1
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fedb 	bl	8000614 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 800085e:	20b1      	movs	r0, #177	; 0xb1
 8000860:	f7ff febe 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000864:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000868:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 800086a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086e:	2102      	movs	r1, #2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fecf 	bl	8000614 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000876:	20b6      	movs	r0, #182	; 0xb6
 8000878:	f7ff feb2 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 800087c:	4a34      	ldr	r2, [pc, #208]	; (8000950 <ILI9341_Init+0x250>)
 800087e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	4611      	mov	r1, r2
 8000886:	8019      	strh	r1, [r3, #0]
 8000888:	3302      	adds	r3, #2
 800088a:	0c12      	lsrs	r2, r2, #16
 800088c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800088e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000892:	2103      	movs	r1, #3
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff febd 	bl	8000614 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800089a:	20f2      	movs	r0, #242	; 0xf2
 800089c:	f7ff fea0 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 80008a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff feb1 	bl	8000614 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80008b2:	2026      	movs	r0, #38	; 0x26
 80008b4:	f7ff fe94 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008b8:	2301      	movs	r3, #1
 80008ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	2101      	movs	r1, #1
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fea5 	bl	8000614 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 80008ca:	20e0      	movs	r0, #224	; 0xe0
 80008cc:	f7ff fe88 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <ILI9341_Init+0x254>)
 80008d2:	f107 0414 	add.w	r4, r7, #20
 80008d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d8:	c407      	stmia	r4!, {r0, r1, r2}
 80008da:	8023      	strh	r3, [r4, #0]
 80008dc:	3402      	adds	r4, #2
 80008de:	0c1b      	lsrs	r3, r3, #16
 80008e0:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	210f      	movs	r1, #15
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe93 	bl	8000614 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 80008ee:	20e1      	movs	r0, #225	; 0xe1
 80008f0:	f7ff fe76 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <ILI9341_Init+0x258>)
 80008f6:	1d3c      	adds	r4, r7, #4
 80008f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fa:	c407      	stmia	r4!, {r0, r1, r2}
 80008fc:	8023      	strh	r3, [r4, #0]
 80008fe:	3402      	adds	r4, #2
 8000900:	0c1b      	lsrs	r3, r3, #16
 8000902:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	210f      	movs	r1, #15
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fe83 	bl	8000614 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800090e:	2011      	movs	r0, #17
 8000910:	f7ff fe66 	bl	80005e0 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000914:	2078      	movs	r0, #120	; 0x78
 8000916:	f000 ffe9 	bl	80018ec <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800091a:	2029      	movs	r0, #41	; 0x29
 800091c:	f7ff fe60 	bl	80005e0 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000920:	2036      	movs	r0, #54	; 0x36
 8000922:	f7ff fe5d 	bl	80005e0 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000926:	2348      	movs	r3, #72	; 0x48
 8000928:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800092a:	463b      	mov	r3, r7
 800092c:	2101      	movs	r1, #1
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe70 	bl	8000614 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000934:	f7ff fe34 	bl	80005a0 <ILI9341_Unselect>
}
 8000938:	bf00      	nop
 800093a:	376c      	adds	r7, #108	; 0x6c
 800093c:	46bd      	mov	sp, r7
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	080049cc 	.word	0x080049cc
 8000944:	080049d4 	.word	0x080049d4
 8000948:	080049d8 	.word	0x080049d8
 800094c:	81120364 	.word	0x81120364
 8000950:	080049dc 	.word	0x080049dc
 8000954:	080049e0 	.word	0x080049e0
 8000958:	080049f0 	.word	0x080049f0

0800095c <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
 8000966:	460b      	mov	r3, r1
 8000968:	80bb      	strh	r3, [r7, #4]
 800096a:	4613      	mov	r3, r2
 800096c:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	2bef      	cmp	r3, #239	; 0xef
 8000972:	d820      	bhi.n	80009b6 <ILI9341_DrawPixel+0x5a>
 8000974:	88bb      	ldrh	r3, [r7, #4]
 8000976:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800097a:	d21c      	bcs.n	80009b6 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 800097c:	f7ff fe04 	bl	8000588 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	3301      	adds	r3, #1
 8000984:	b29a      	uxth	r2, r3
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	3301      	adds	r3, #1
 800098a:	b29b      	uxth	r3, r3
 800098c:	88b9      	ldrh	r1, [r7, #4]
 800098e:	88f8      	ldrh	r0, [r7, #6]
 8000990:	f7ff fe6e 	bl	8000670 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	0a1b      	lsrs	r3, r3, #8
 8000998:	b29b      	uxth	r3, r3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	733b      	strb	r3, [r7, #12]
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2102      	movs	r1, #2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe32 	bl	8000614 <ILI9341_WriteData>

    ILI9341_Unselect();
 80009b0:	f7ff fdf6 	bl	80005a0 <ILI9341_Unselect>
 80009b4:	e000      	b.n	80009b8 <ILI9341_DrawPixel+0x5c>
        return;
 80009b6:	bf00      	nop
}
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <ILI9341_FillRectangle>:
    }

    ILI9341_Unselect();
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	4611      	mov	r1, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	4623      	mov	r3, r4
 80009d0:	80fb      	strh	r3, [r7, #6]
 80009d2:	4603      	mov	r3, r0
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	460b      	mov	r3, r1
 80009d8:	807b      	strh	r3, [r7, #2]
 80009da:	4613      	mov	r3, r2
 80009dc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	2bef      	cmp	r3, #239	; 0xef
 80009e2:	d853      	bhi.n	8000a8c <ILI9341_FillRectangle+0xcc>
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80009ea:	d24f      	bcs.n	8000a8c <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80009ec:	88fa      	ldrh	r2, [r7, #6]
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	4413      	add	r3, r2
 80009f2:	2bf0      	cmp	r3, #240	; 0xf0
 80009f4:	dd03      	ble.n	80009fe <ILI9341_FillRectangle+0x3e>
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80009fc:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80009fe:	88ba      	ldrh	r2, [r7, #4]
 8000a00:	883b      	ldrh	r3, [r7, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000a08:	dd03      	ble.n	8000a12 <ILI9341_FillRectangle+0x52>
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000a10:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000a12:	f7ff fdb9 	bl	8000588 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000a16:	88fa      	ldrh	r2, [r7, #6]
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	b29c      	uxth	r4, r3
 8000a22:	88ba      	ldrh	r2, [r7, #4]
 8000a24:	883b      	ldrh	r3, [r7, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	88b9      	ldrh	r1, [r7, #4]
 8000a30:	88f8      	ldrh	r0, [r7, #6]
 8000a32:	4622      	mov	r2, r4
 8000a34:	f7ff fe1c 	bl	8000670 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000a38:	8c3b      	ldrh	r3, [r7, #32]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	733b      	strb	r3, [r7, #12]
 8000a42:	8c3b      	ldrh	r3, [r7, #32]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <ILI9341_FillRectangle+0xd4>)
 8000a4e:	f001 fad7 	bl	8002000 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000a52:	883b      	ldrh	r3, [r7, #0]
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	e013      	b.n	8000a80 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	80fb      	strh	r3, [r7, #6]
 8000a5c:	e00a      	b.n	8000a74 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000a5e:	f107 010c 	add.w	r1, r7, #12
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	2202      	movs	r2, #2
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <ILI9341_FillRectangle+0xd8>)
 8000a6a:	f002 f808 	bl	8002a7e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	80fb      	strh	r3, [r7, #6]
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1f1      	bne.n	8000a5e <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	80bb      	strh	r3, [r7, #4]
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1e8      	bne.n	8000a58 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8000a86:	f7ff fd8b 	bl	80005a0 <ILI9341_Unselect>
 8000a8a:	e000      	b.n	8000a8e <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000a8c:	bf00      	nop
}
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	40020000 	.word	0x40020000
 8000a98:	20000098 	.word	0x20000098

08000a9c <ILI9341_TouchSelect>:
#include "ili9341_touch.h"

#define READ_X 0xD0
#define READ_Y 0x90

static void ILI9341_TouchSelect() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <ILI9341_TouchSelect+0x14>)
 8000aa6:	f001 faab 	bl	8002000 <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <ILI9341_TouchUnselect>:

void ILI9341_TouchUnselect() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2120      	movs	r1, #32
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <ILI9341_TouchUnselect+0x14>)
 8000abe:	f001 fa9f 	bl	8002000 <HAL_GPIO_WritePin>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40020800 	.word	0x40020800

08000acc <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ILI9341_TOUCH_IRQ_GPIO_Port, ILI9341_TOUCH_IRQ_Pin) == GPIO_PIN_RESET;
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <ILI9341_TouchPressed+0x1c>)
 8000ad4:	f001 fa7c 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf0c      	ite	eq
 8000ade:	2301      	moveq	r3, #1
 8000ae0:	2300      	movne	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40020400 	.word	0x40020400

08000aec <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t* x, uint16_t* y) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    ILI9341_TouchSelect();
 8000af6:	f7ff ffd1 	bl	8000a9c <ILI9341_TouchSelect>

    uint32_t avg_x = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 16; i++) {
 8000b06:	2300      	movs	r3, #0
 8000b08:	77bb      	strb	r3, [r7, #30]
 8000b0a:	e03f      	b.n	8000b8c <ILI9341_TouchGetCoordinates+0xa0>
        if(!ILI9341_TouchPressed())
 8000b0c:	f7ff ffde 	bl	8000acc <ILI9341_TouchPressed>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f083 0301 	eor.w	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d13b      	bne.n	8000b94 <ILI9341_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000b1c:	7ffb      	ldrb	r3, [r7, #31]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	2201      	movs	r2, #1
 8000b28:	4945      	ldr	r1, [pc, #276]	; (8000c40 <ILI9341_TouchGetCoordinates+0x154>)
 8000b2a:	4846      	ldr	r0, [pc, #280]	; (8000c44 <ILI9341_TouchGetCoordinates+0x158>)
 8000b2c:	f001 ffa7 	bl	8002a7e <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000b30:	f107 0210 	add.w	r2, r7, #16
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	4942      	ldr	r1, [pc, #264]	; (8000c48 <ILI9341_TouchGetCoordinates+0x15c>)
 8000b3e:	4841      	ldr	r0, [pc, #260]	; (8000c44 <ILI9341_TouchGetCoordinates+0x158>)
 8000b40:	f002 f8d9 	bl	8002cf6 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4940      	ldr	r1, [pc, #256]	; (8000c4c <ILI9341_TouchGetCoordinates+0x160>)
 8000b4c:	483d      	ldr	r0, [pc, #244]	; (8000c44 <ILI9341_TouchGetCoordinates+0x158>)
 8000b4e:	f001 ff96 	bl	8002a7e <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&ILI9341_TOUCH_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000b52:	f107 020c 	add.w	r2, r7, #12
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	493a      	ldr	r1, [pc, #232]	; (8000c48 <ILI9341_TouchGetCoordinates+0x15c>)
 8000b60:	4838      	ldr	r0, [pc, #224]	; (8000c44 <ILI9341_TouchGetCoordinates+0x158>)
 8000b62:	f002 f8c8 	bl	8002cf6 <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8000b66:	7b3b      	ldrb	r3, [r7, #12]
 8000b68:	021b      	lsls	r3, r3, #8
 8000b6a:	7b7a      	ldrb	r2, [r7, #13]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	461a      	mov	r2, r3
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	4413      	add	r3, r2
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8000b76:	7c3b      	ldrb	r3, [r7, #16]
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	7c7a      	ldrb	r2, [r7, #17]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	461a      	mov	r2, r3
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	4413      	add	r3, r2
 8000b84:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++) {
 8000b86:	7fbb      	ldrb	r3, [r7, #30]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	77bb      	strb	r3, [r7, #30]
 8000b8c:	7fbb      	ldrb	r3, [r7, #30]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d9bc      	bls.n	8000b0c <ILI9341_TouchGetCoordinates+0x20>
 8000b92:	e000      	b.n	8000b96 <ILI9341_TouchGetCoordinates+0xaa>
            break;
 8000b94:	bf00      	nop
    }

    ILI9341_TouchUnselect();
 8000b96:	f7ff ff8d 	bl	8000ab4 <ILI9341_TouchUnselect>

    if(nsamples < 16)
 8000b9a:	7ffb      	ldrb	r3, [r7, #31]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d801      	bhi.n	8000ba4 <ILI9341_TouchGetCoordinates+0xb8>
        return false;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e049      	b.n	8000c38 <ILI9341_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
    if(raw_x < ILI9341_TOUCH_MIN_RAW_X) raw_x = ILI9341_TOUCH_MIN_RAW_X;
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bb0:	d202      	bcs.n	8000bb8 <ILI9341_TouchGetCoordinates+0xcc>
 8000bb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bb6:	61bb      	str	r3, [r7, #24]
    if(raw_x > ILI9341_TOUCH_MAX_RAW_X) raw_x = ILI9341_TOUCH_MAX_RAW_X;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	f247 5294 	movw	r2, #30100	; 0x7594
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d902      	bls.n	8000bc8 <ILI9341_TouchGetCoordinates+0xdc>
 8000bc2:	f247 5394 	movw	r3, #30100	; 0x7594
 8000bc6:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	617b      	str	r3, [r7, #20]
    if(raw_y < ILI9341_TOUCH_MIN_RAW_X) raw_y = ILI9341_TOUCH_MIN_RAW_Y;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bd4:	d202      	bcs.n	8000bdc <ILI9341_TouchGetCoordinates+0xf0>
 8000bd6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bda:	617b      	str	r3, [r7, #20]
    if(raw_y > ILI9341_TOUCH_MAX_RAW_Y) raw_y = ILI9341_TOUCH_MAX_RAW_Y;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000be2:	d902      	bls.n	8000bea <ILI9341_TouchGetCoordinates+0xfe>
 8000be4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8000be8:	617b      	str	r3, [r7, #20]

    // Uncomment this line to calibrate touchscreen:
    //UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);

    *x = 240 - ( (raw_x - ILI9341_TOUCH_MIN_RAW_X) * ILI9341_TOUCH_SCALE_X / (ILI9341_TOUCH_MAX_RAW_X - ILI9341_TOUCH_MIN_RAW_X) );
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4613      	mov	r3, r2
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	f5a3 23ea 	sub.w	r3, r3, #479232	; 0x75000
 8000bf8:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <ILI9341_TouchGetCoordinates+0x164>)
 8000bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000c02:	0b1b      	lsrs	r3, r3, #12
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	801a      	strh	r2, [r3, #0]
    *y = 320 - ( (raw_y - ILI9341_TOUCH_MIN_RAW_Y) * ILI9341_TOUCH_SCALE_Y / (ILI9341_TOUCH_MAX_RAW_Y - ILI9341_TOUCH_MIN_RAW_Y) );
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	f5a3 231c 	sub.w	r3, r3, #638976	; 0x9c000
 8000c1e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000c22:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <ILI9341_TouchGetCoordinates+0x168>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	0b5b      	lsrs	r3, r3, #13
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	801a      	strh	r2, [r3, #0]

    return true;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	08004a34 	.word	0x08004a34
 8000c44:	20000098 	.word	0x20000098
 8000c48:	08004a38 	.word	0x08004a38
 8000c4c:	08004a3c 	.word	0x08004a3c
 8000c50:	2550dcfb 	.word	0x2550dcfb
 8000c54:	45e7b273 	.word	0x45e7b273

08000c58 <UART_Printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Printf(const char* fmt, ...) {
 8000c58:	b40f      	push	{r0, r1, r2, r3}
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b0c2      	sub	sp, #264	; 0x108
 8000c5e:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8000c60:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	601a      	str	r2, [r3, #0]
    vsnprintf(buff, sizeof(buff), fmt, args);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	f107 0008 	add.w	r0, r7, #8
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	f003 fa80 	bl	800417c <vsniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff),
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff faad 	bl	80001e0 <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f107 0108 	add.w	r1, r7, #8
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <UART_Printf+0x50>)
 8000c94:	f002 ff4b 	bl	8003b2e <HAL_UART_Transmit>
                      HAL_MAX_DELAY);
    va_end(args);
}
 8000c98:	bf00      	nop
 8000c9a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr
 8000ca8:	20000138 	.word	0x20000138

08000cac <DrawPiano>:


void DrawPiano()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af02      	add	r7, sp, #8
	if(HAL_SPI_DeInit(&hspi2) != HAL_OK) {
 8000cb2:	4851      	ldr	r0, [pc, #324]	; (8000df8 <DrawPiano+0x14c>)
 8000cb4:	f001 febb 	bl	8002a2e <HAL_SPI_DeInit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <DrawPiano+0x1a>
	        UART_Printf("HAL_SPI_DeInit failed!\r\n");
 8000cbe:	484f      	ldr	r0, [pc, #316]	; (8000dfc <DrawPiano+0x150>)
 8000cc0:	f7ff ffca 	bl	8000c58 <UART_Printf>
	        return;
 8000cc4:	e096      	b.n	8000df4 <DrawPiano+0x148>
	    }

	    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc6:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <DrawPiano+0x14c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]

	    if(HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000ccc:	484a      	ldr	r0, [pc, #296]	; (8000df8 <DrawPiano+0x14c>)
 8000cce:	f001 fe25 	bl	800291c <HAL_SPI_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <DrawPiano+0x34>
	        UART_Printf("HAL_SPI_Init failed!\r\n");
 8000cd8:	4849      	ldr	r0, [pc, #292]	; (8000e00 <DrawPiano+0x154>)
 8000cda:	f7ff ffbd 	bl	8000c58 <UART_Printf>
	        return;
 8000cde:	e089      	b.n	8000df4 <DrawPiano+0x148>
	    }
//рисуем пианино
	    ILI9341_FillRectangle(0, 0, 240, 45,ILI9341_WHITE );
 8000ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	232d      	movs	r3, #45	; 0x2d
 8000ce8:	22f0      	movs	r2, #240	; 0xf0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fe67 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(0, 46, 240, 45,ILI9341_WHITE );
 8000cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	232d      	movs	r3, #45	; 0x2d
 8000cfa:	22f0      	movs	r2, #240	; 0xf0
 8000cfc:	212e      	movs	r1, #46	; 0x2e
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff fe5e 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(0, 92, 240, 45,ILI9341_WHITE );
 8000d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	232d      	movs	r3, #45	; 0x2d
 8000d0c:	22f0      	movs	r2, #240	; 0xf0
 8000d0e:	215c      	movs	r1, #92	; 0x5c
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fe55 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(0, 138, 240, 45,ILI9341_WHITE );
 8000d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	232d      	movs	r3, #45	; 0x2d
 8000d1e:	22f0      	movs	r2, #240	; 0xf0
 8000d20:	218a      	movs	r1, #138	; 0x8a
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fe4c 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(0, 184, 240, 45,ILI9341_WHITE );
 8000d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	232d      	movs	r3, #45	; 0x2d
 8000d30:	22f0      	movs	r2, #240	; 0xf0
 8000d32:	21b8      	movs	r1, #184	; 0xb8
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fe43 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(0, 230, 240, 45,ILI9341_WHITE );
 8000d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	232d      	movs	r3, #45	; 0x2d
 8000d42:	22f0      	movs	r2, #240	; 0xf0
 8000d44:	21e6      	movs	r1, #230	; 0xe6
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff fe3a 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(0, 276, 240, 45,ILI9341_WHITE );
 8000d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	232d      	movs	r3, #45	; 0x2d
 8000d54:	22f0      	movs	r2, #240	; 0xf0
 8000d56:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fe30 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(0, 322, 240, 45,ILI9341_WHITE );
 8000d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	232d      	movs	r3, #45	; 0x2d
 8000d68:	22f0      	movs	r2, #240	; 0xf0
 8000d6a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fe26 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(120, 33, 120, 30,ILI9341_BLACK );
 8000d74:	2300      	movs	r3, #0
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	231e      	movs	r3, #30
 8000d7a:	2278      	movs	r2, #120	; 0x78
 8000d7c:	2121      	movs	r1, #33	; 0x21
 8000d7e:	2078      	movs	r0, #120	; 0x78
 8000d80:	f7ff fe1e 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(120, 78, 120, 30,ILI9341_BLACK );
 8000d84:	2300      	movs	r3, #0
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	231e      	movs	r3, #30
 8000d8a:	2278      	movs	r2, #120	; 0x78
 8000d8c:	214e      	movs	r1, #78	; 0x4e
 8000d8e:	2078      	movs	r0, #120	; 0x78
 8000d90:	f7ff fe16 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(120, 168, 120, 30,ILI9341_BLACK );
 8000d94:	2300      	movs	r3, #0
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	231e      	movs	r3, #30
 8000d9a:	2278      	movs	r2, #120	; 0x78
 8000d9c:	21a8      	movs	r1, #168	; 0xa8
 8000d9e:	2078      	movs	r0, #120	; 0x78
 8000da0:	f7ff fe0e 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(120, 213, 120, 30,ILI9341_BLACK );
 8000da4:	2300      	movs	r3, #0
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	231e      	movs	r3, #30
 8000daa:	2278      	movs	r2, #120	; 0x78
 8000dac:	21d5      	movs	r1, #213	; 0xd5
 8000dae:	2078      	movs	r0, #120	; 0x78
 8000db0:	f7ff fe06 	bl	80009c0 <ILI9341_FillRectangle>
	    ILI9341_FillRectangle(120, 258, 120, 30,ILI9341_BLACK );
 8000db4:	2300      	movs	r3, #0
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	231e      	movs	r3, #30
 8000dba:	2278      	movs	r2, #120	; 0x78
 8000dbc:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000dc0:	2078      	movs	r0, #120	; 0x78
 8000dc2:	f7ff fdfd 	bl	80009c0 <ILI9341_FillRectangle>

	    if(HAL_SPI_DeInit(&hspi2) != HAL_OK) {
 8000dc6:	480c      	ldr	r0, [pc, #48]	; (8000df8 <DrawPiano+0x14c>)
 8000dc8:	f001 fe31 	bl	8002a2e <HAL_SPI_DeInit>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <DrawPiano+0x12e>
	        UART_Printf("HAL_SPI_DeInit failed!\r\n");
 8000dd2:	480a      	ldr	r0, [pc, #40]	; (8000dfc <DrawPiano+0x150>)
 8000dd4:	f7ff ff40 	bl	8000c58 <UART_Printf>
	        return;
 8000dd8:	e00c      	b.n	8000df4 <DrawPiano+0x148>
	    }

	    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <DrawPiano+0x14c>)
 8000ddc:	2230      	movs	r2, #48	; 0x30
 8000dde:	61da      	str	r2, [r3, #28]

	    if(HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <DrawPiano+0x14c>)
 8000de2:	f001 fd9b 	bl	800291c <HAL_SPI_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <DrawPiano+0x148>
	        UART_Printf("HAL_SPI_Init failed!\r\n");
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <DrawPiano+0x154>)
 8000dee:	f7ff ff33 	bl	8000c58 <UART_Printf>
	        return;
 8000df2:	bf00      	nop
	    }
}
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000098 	.word	0x20000098
 8000dfc:	08004a00 	.word	0x08004a00
 8000e00:	08004a1c 	.word	0x08004a1c

08000e04 <init>:

void init() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 8000e08:	f7ff fbca 	bl	80005a0 <ILI9341_Unselect>
    ILI9341_TouchUnselect();
 8000e0c:	f7ff fe52 	bl	8000ab4 <ILI9341_TouchUnselect>
    ILI9341_Init();
 8000e10:	f7ff fc76 	bl	8000700 <ILI9341_Init>
    DrawPiano();
 8000e14:	f7ff ff4a 	bl	8000cac <DrawPiano>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <TouchGetCoordinates>:


bool TouchGetCoordinates(uint16_t* x_addr, uint16_t* y_addr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
	uint16_t tx;
	uint16_t ty;
	tx = *x_addr;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	81fb      	strh	r3, [r7, #14]
	ty = *y_addr;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	81bb      	strh	r3, [r7, #12]

	if (ILI9341_TouchGetCoordinates(x_addr, y_addr) && *y_addr < 310)
 8000e32:	6839      	ldr	r1, [r7, #0]
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fe59 	bl	8000aec <ILI9341_TouchGetCoordinates>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <TouchGetCoordinates+0x32>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000e48:	d201      	bcs.n	8000e4e <TouchGetCoordinates+0x32>
	{
		return true;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e006      	b.n	8000e5c <TouchGetCoordinates+0x40>
	}
	else
	{
		*x_addr = tx;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	89fa      	ldrh	r2, [r7, #14]
 8000e52:	801a      	strh	r2, [r3, #0]
		*y_addr = ty;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	89ba      	ldrh	r2, [r7, #12]
 8000e58:	801a      	strh	r2, [r3, #0]
		return false;
 8000e5a:	2300      	movs	r3, #0
	}
	return false;
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <playIfWhite>:


bool  prevTouch;

void playIfWhite()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
	uint16_t x, y;
	TouchGetCoordinates(&x, &y);
 8000e6a:	1d3a      	adds	r2, r7, #4
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffd3 	bl	8000e1c <TouchGetCoordinates>
	if (x>00 && x<120)
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d066      	beq.n	8000f4a <playIfWhite+0xe6>
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	2b77      	cmp	r3, #119	; 0x77
 8000e80:	d863      	bhi.n	8000f4a <playIfWhite+0xe6>
	{

		if (y >= 0 && y<45)
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	2b2c      	cmp	r3, #44	; 0x2c
 8000e86:	d807      	bhi.n	8000e98 <playIfWhite+0x34>
			//тон генерации
									{
										TIM4->ARR = 8030;
 8000e88:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <playIfWhite+0xec>)
 8000e8a:	f641 725e 	movw	r2, #8030	; 0x1f5e
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
										TIM4->CCR1 = 4000;
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <playIfWhite+0xec>)
 8000e92:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
									}
									if( y>=45 && y<91 )
 8000e98:	88bb      	ldrh	r3, [r7, #4]
 8000e9a:	2b2c      	cmp	r3, #44	; 0x2c
 8000e9c:	d90a      	bls.n	8000eb4 <playIfWhite+0x50>
 8000e9e:	88bb      	ldrh	r3, [r7, #4]
 8000ea0:	2b5a      	cmp	r3, #90	; 0x5a
 8000ea2:	d807      	bhi.n	8000eb4 <playIfWhite+0x50>
									{
										TIM4->ARR =7155;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <playIfWhite+0xec>)
 8000ea6:	f641 32f3 	movw	r2, #7155	; 0x1bf3
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
										TIM4->CCR1 = 3600;
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <playIfWhite+0xec>)
 8000eae:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
									}
									if( y>=91 && y<138 )
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	2b5a      	cmp	r3, #90	; 0x5a
 8000eb8:	d90a      	bls.n	8000ed0 <playIfWhite+0x6c>
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	2b89      	cmp	r3, #137	; 0x89
 8000ebe:	d807      	bhi.n	8000ed0 <playIfWhite+0x6c>
									{
										TIM4->ARR = 6373;
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <playIfWhite+0xec>)
 8000ec2:	f641 02e5 	movw	r2, #6373	; 0x18e5
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
										TIM4->CCR1 = 3180;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <playIfWhite+0xec>)
 8000eca:	f640 426c 	movw	r2, #3180	; 0xc6c
 8000ece:	635a      	str	r2, [r3, #52]	; 0x34
									}
									if( y>=138 && y<184 )
 8000ed0:	88bb      	ldrh	r3, [r7, #4]
 8000ed2:	2b89      	cmp	r3, #137	; 0x89
 8000ed4:	d90a      	bls.n	8000eec <playIfWhite+0x88>
 8000ed6:	88bb      	ldrh	r3, [r7, #4]
 8000ed8:	2bb7      	cmp	r3, #183	; 0xb7
 8000eda:	d807      	bhi.n	8000eec <playIfWhite+0x88>
									{
										TIM4->ARR =6000;
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <playIfWhite+0xec>)
 8000ede:	f241 7270 	movw	r2, #6000	; 0x1770
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
										TIM4->CCR1 = 3000;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <playIfWhite+0xec>)
 8000ee6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000eea:	635a      	str	r2, [r3, #52]	; 0x34
									}
									if( y>=184 && y<230 )
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	2bb7      	cmp	r3, #183	; 0xb7
 8000ef0:	d90a      	bls.n	8000f08 <playIfWhite+0xa4>
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	2be5      	cmp	r3, #229	; 0xe5
 8000ef6:	d807      	bhi.n	8000f08 <playIfWhite+0xa4>
									{
										TIM4->ARR =5357;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <playIfWhite+0xec>)
 8000efa:	f241 42ed 	movw	r2, #5357	; 0x14ed
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
										TIM4->CCR1 = 2678;
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <playIfWhite+0xec>)
 8000f02:	f640 2276 	movw	r2, #2678	; 0xa76
 8000f06:	635a      	str	r2, [r3, #52]	; 0x34
									}
									if( y>=230 && y<276 )
 8000f08:	88bb      	ldrh	r3, [r7, #4]
 8000f0a:	2be5      	cmp	r3, #229	; 0xe5
 8000f0c:	d90b      	bls.n	8000f26 <playIfWhite+0xc2>
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8000f14:	d207      	bcs.n	8000f26 <playIfWhite+0xc2>
									{
										TIM4->ARR =4883;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <playIfWhite+0xec>)
 8000f18:	f241 3213 	movw	r2, #4883	; 0x1313
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
										TIM4->CCR1 = 2441;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <playIfWhite+0xec>)
 8000f20:	f640 1289 	movw	r2, #2441	; 0x989
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
									}
									if( y>=276 && y<322 )
 8000f26:	88bb      	ldrh	r3, [r7, #4]
 8000f28:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8000f2c:	d30c      	bcc.n	8000f48 <playIfWhite+0xe4>
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000f34:	d208      	bcs.n	8000f48 <playIfWhite+0xe4>
									{
										TIM4->ARR =4253;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <playIfWhite+0xec>)
 8000f38:	f241 029d 	movw	r2, #4253	; 0x109d
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
										TIM4->CCR1 = 2100;
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <playIfWhite+0xec>)
 8000f40:	f640 0234 	movw	r2, #2100	; 0x834
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
 8000f46:	e000      	b.n	8000f4a <playIfWhite+0xe6>
									}
									return 0;
 8000f48:	bf00      	nop
	}
}
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40000800 	.word	0x40000800

08000f54 <playIfBlack>:


void playIfBlack()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	uint16_t x, y;
		ILI9341_TouchGetCoordinates(&x, &y);
 8000f5a:	1d3a      	adds	r2, r7, #4
 8000f5c:	1dbb      	adds	r3, r7, #6
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fdc3 	bl	8000aec <ILI9341_TouchGetCoordinates>
	if (x>120 && x<240)
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	2b78      	cmp	r3, #120	; 0x78
 8000f6a:	d94c      	bls.n	8001006 <playIfBlack+0xb2>
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2bef      	cmp	r3, #239	; 0xef
 8000f70:	d849      	bhi.n	8001006 <playIfBlack+0xb2>
					{

							if (y >= 33 && y<63)
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	2b20      	cmp	r3, #32
 8000f76:	d90a      	bls.n	8000f8e <playIfBlack+0x3a>
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8000f7c:	d807      	bhi.n	8000f8e <playIfBlack+0x3a>
							{
								TIM4->ARR = 7581;
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <playIfBlack+0xb8>)
 8000f80:	f641 529d 	movw	r2, #7581	; 0x1d9d
 8000f84:	62da      	str	r2, [r3, #44]	; 0x2c
								TIM4->CCR1 = 3800;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <playIfBlack+0xb8>)
 8000f88:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
							}
							if( y>=78 && y<108 )
 8000f8e:	88bb      	ldrh	r3, [r7, #4]
 8000f90:	2b4d      	cmp	r3, #77	; 0x4d
 8000f92:	d90a      	bls.n	8000faa <playIfBlack+0x56>
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	2b6b      	cmp	r3, #107	; 0x6b
 8000f98:	d807      	bhi.n	8000faa <playIfBlack+0x56>
							{
								TIM4->ARR =6752;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <playIfBlack+0xb8>)
 8000f9c:	f44f 52d3 	mov.w	r2, #6752	; 0x1a60
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
								TIM4->CCR1 = 3376;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <playIfBlack+0xb8>)
 8000fa4:	f44f 6253 	mov.w	r2, #3376	; 0xd30
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
							}
							if( y>=168 && y<198 )
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	2ba7      	cmp	r3, #167	; 0xa7
 8000fae:	d90a      	bls.n	8000fc6 <playIfBlack+0x72>
 8000fb0:	88bb      	ldrh	r3, [r7, #4]
 8000fb2:	2bc5      	cmp	r3, #197	; 0xc5
 8000fb4:	d807      	bhi.n	8000fc6 <playIfBlack+0x72>
							{
								TIM4->ARR = 5675;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <playIfBlack+0xb8>)
 8000fb8:	f241 622b 	movw	r2, #5675	; 0x162b
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
								TIM4->CCR1 = 2837;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <playIfBlack+0xb8>)
 8000fc0:	f640 3215 	movw	r2, #2837	; 0xb15
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
							}
							if( y>213 && y<243 )
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	2bd5      	cmp	r3, #213	; 0xd5
 8000fca:	d90a      	bls.n	8000fe2 <playIfBlack+0x8e>
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	2bf2      	cmp	r3, #242	; 0xf2
 8000fd0:	d807      	bhi.n	8000fe2 <playIfBlack+0x8e>
							{
								TIM4->ARR =5057;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <playIfBlack+0xb8>)
 8000fd4:	f241 32c1 	movw	r2, #5057	; 0x13c1
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
								TIM4->CCR1 = 2528;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <playIfBlack+0xb8>)
 8000fdc:	f44f 621e 	mov.w	r2, #2528	; 0x9e0
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
							}
							if( y>258 && y<288 )
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000fe8:	d90c      	bls.n	8001004 <playIfBlack+0xb0>
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000ff0:	d208      	bcs.n	8001004 <playIfBlack+0xb0>
							{
								TIM4->ARR =4506;
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <playIfBlack+0xb8>)
 8000ff4:	f241 129a 	movw	r2, #4506	; 0x119a
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
								TIM4->CCR1 = 2253;
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <playIfBlack+0xb8>)
 8000ffc:	f640 02cd 	movw	r2, #2253	; 0x8cd
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
 8001002:	e000      	b.n	8001006 <playIfBlack+0xb2>
							}
							return 0;
 8001004:	bf00      	nop
					}
}
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40000800 	.word	0x40000800

08001010 <loop>:


void loop() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0



        uint16_t x, y;

        if (ILI9341_TouchGetCoordinates(&x, &y))
 8001016:	1d3a      	adds	r2, r7, #4
 8001018:	1dbb      	adds	r3, r7, #6
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fd65 	bl	8000aec <ILI9341_TouchGetCoordinates>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d015      	beq.n	8001054 <loop+0x44>
        {
        	if (!prevTouch)
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <loop+0x60>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d018      	beq.n	8001068 <loop+0x58>
        	{
        		ILI9341_DrawPixel(x, y, ILI9341_RED );
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc8c 	bl	800095c <ILI9341_DrawPixel>

        		playIfWhite();
 8001044:	f7ff ff0e 	bl	8000e64 <playIfWhite>
        		playIfBlack();
 8001048:	f7ff ff84 	bl	8000f54 <playIfBlack>
        		prevTouch = true;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <loop+0x60>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
        	}
        	prevTouch = false;
        }


}
 8001052:	e009      	b.n	8001068 <loop+0x58>
        	if (prevTouch)
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <loop+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <loop+0x52>
        		 TIM4->CCR1=0;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <loop+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
        	prevTouch = false;
 8001062:	4b03      	ldr	r3, [pc, #12]	; (8001070 <loop+0x60>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000017c 	.word	0x2000017c
 8001074:	40000800 	.word	0x40000800

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f000 fbc4 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f814 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 f938 	bl	80012f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001088:	f000 f90c 	bl	80012a4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800108c:	f000 f87a 	bl	8001184 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001090:	f000 f8ae 	bl	80011f0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001094:	2100      	movs	r1, #0
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <main+0x30>)
 8001098:	f002 f8ea 	bl	8003270 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 800109c:	f7ff feb2 	bl	8000e04 <init>
  while (1)
  {
    loop();
 80010a0:	f7ff ffb6 	bl	8001010 <loop>
 80010a4:	e7fc      	b.n	80010a0 <main+0x28>
 80010a6:	bf00      	nop
 80010a8:	200000f0 	.word	0x200000f0

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 f82a 	bl	8004114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <SystemClock_Config+0xd0>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a28      	ldr	r2, [pc, #160]	; (800117c <SystemClock_Config+0xd0>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <SystemClock_Config+0xd0>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <SystemClock_Config+0xd4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <SystemClock_Config+0xd4>)
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001114:	2310      	movs	r3, #16
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001118:	2302      	movs	r3, #2
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111c:	2300      	movs	r3, #0
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001120:	2310      	movs	r3, #16
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001124:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001128:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800112a:	2304      	movs	r3, #4
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800112e:	2307      	movs	r3, #7
 8001130:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	4618      	mov	r0, r3
 8001138:	f000 ff7c 	bl	8002034 <HAL_RCC_OscConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001142:	f000 f969 	bl	8001418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114a:	2302      	movs	r3, #2
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001156:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2102      	movs	r1, #2
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f9de 	bl	8002524 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800116e:	f000 f953 	bl	8001418 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	; 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_SPI2_Init+0x64>)
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <MX_SPI2_Init+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_SPI2_Init+0x64>)
 8001190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001194:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SPI2_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_SPI2_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011d0:	220a      	movs	r2, #10
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_SPI2_Init+0x64>)
 80011d6:	f001 fba1 	bl	800291c <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011e0:	f000 f91a 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000098 	.word	0x20000098
 80011ec:	40003800 	.word	0x40003800

080011f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_TIM4_Init+0xac>)
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <MX_TIM4_Init+0xb0>)
 8001216:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <MX_TIM4_Init+0xac>)
 800121a:	2204      	movs	r2, #4
 800121c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_TIM4_Init+0xac>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_TIM4_Init+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_TIM4_Init+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM4_Init+0xac>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <MX_TIM4_Init+0xac>)
 8001238:	f001 ffca 	bl	80031d0 <HAL_TIM_PWM_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001242:	f000 f8e9 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	4619      	mov	r1, r3
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_TIM4_Init+0xac>)
 8001256:	f002 fbaf 	bl	80039b8 <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001260:	f000 f8da 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001264:	2360      	movs	r3, #96	; 0x60
 8001266:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM4_Init+0xac>)
 800127e:	f002 f8a7 	bl	80033d0 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001288:	f000 f8c6 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM4_Init+0xac>)
 800128e:	f000 f99d 	bl	80015cc <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000f0 	.word	0x200000f0
 80012a0:	40000800 	.word	0x40000800

080012a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_USART2_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART2_UART_Init+0x4c>)
 80012dc:	f002 fbda 	bl	8003a94 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e6:	f000 f897 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000138 	.word	0x20000138
 80012f4:	40004400 	.word	0x40004400

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <MX_GPIO_Init+0x110>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a3c      	ldr	r2, [pc, #240]	; (8001408 <MX_GPIO_Init+0x110>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <MX_GPIO_Init+0x110>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <MX_GPIO_Init+0x110>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a35      	ldr	r2, [pc, #212]	; (8001408 <MX_GPIO_Init+0x110>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <MX_GPIO_Init+0x110>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <MX_GPIO_Init+0x110>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a2e      	ldr	r2, [pc, #184]	; (8001408 <MX_GPIO_Init+0x110>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <MX_GPIO_Init+0x110>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <MX_GPIO_Init+0x110>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a27      	ldr	r2, [pc, #156]	; (8001408 <MX_GPIO_Init+0x110>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <MX_GPIO_Init+0x110>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_CS_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	21e0      	movs	r1, #224	; 0xe0
 8001382:	4822      	ldr	r0, [pc, #136]	; (800140c <MX_GPIO_Init+0x114>)
 8001384:	f000 fe3c 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_RST_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2130      	movs	r1, #48	; 0x30
 800138c:	4820      	ldr	r0, [pc, #128]	; (8001410 <MX_GPIO_Init+0x118>)
 800138e:	f000 fe37 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001398:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4819      	ldr	r0, [pc, #100]	; (8001410 <MX_GPIO_Init+0x118>)
 80013aa:	f000 fba9 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TFT_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TFT_CS_Pin|TFT_DC_Pin;
 80013ae:	23e0      	movs	r3, #224	; 0xe0
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_GPIO_Init+0x114>)
 80013c6:	f000 fb9b 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|TOUCH_CS_Pin;
 80013ca:	2330      	movs	r3, #48	; 0x30
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0x118>)
 80013e2:	f000 fb8d 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80013e6:	2301      	movs	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_GPIO_Init+0x11c>)
 80013fa:	f000 fb81 	bl	8001b00 <HAL_GPIO_Init>

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020800 	.word	0x40020800
 8001414:	40020400 	.word	0x40020400

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x4>
	...

08001420 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145e:	2007      	movs	r0, #7
 8001460:	f000 fb1a 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a28      	ldr	r2, [pc, #160]	; (8001530 <HAL_SPI_MspInit+0xc0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d14a      	bne.n	8001528 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014e6:	230c      	movs	r3, #12
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014f6:	2305      	movs	r3, #5
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <HAL_SPI_MspInit+0xc8>)
 8001502:	f000 fafd 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001518:	2305      	movs	r3, #5
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <HAL_SPI_MspInit+0xcc>)
 8001524:	f000 faec 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40003800 	.word	0x40003800
 8001534:	40023800 	.word	0x40023800
 8001538:	40020800 	.word	0x40020800
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_SPI_MspDeInit+0x38>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10e      	bne.n	8001570 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_SPI_MspDeInit+0x3c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_SPI_MspDeInit+0x3c>)
 8001558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2|GPIO_PIN_3);
 800155e:	210c      	movs	r1, #12
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <HAL_SPI_MspDeInit+0x40>)
 8001562:	f000 fc51 	bl	8001e08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <HAL_SPI_MspDeInit+0x44>)
 800156c:	f000 fc4c 	bl	8001e08 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40003800 	.word	0x40003800
 800157c:	40023800 	.word	0x40023800
 8001580:	40020800 	.word	0x40020800
 8001584:	40020400 	.word	0x40020400

08001588 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10d      	bne.n	80015b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_TIM_PWM_MspInit+0x40>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_TIM_PWM_MspInit+0x40>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <HAL_TIM_PWM_MspInit+0x40>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_TIM_MspPostInit+0x68>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d11d      	bne.n	800162a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_TIM_MspPostInit+0x6c>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_TIM_MspPostInit+0x6c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800160a:	2340      	movs	r3, #64	; 0x40
 800160c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800161a:	2302      	movs	r3, #2
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_TIM_MspPostInit+0x70>)
 8001626:	f000 fa6b 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40000800 	.word	0x40000800
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_UART_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12b      	bne.n	80016ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0x88>)
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800169a:	230c      	movs	r3, #12
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016aa:	2307      	movs	r3, #7
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <HAL_UART_MspInit+0x8c>)
 80016b6:	f000 fa23 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40004400 	.word	0x40004400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 f8c6 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f002 fcb4 	bl	80040c0 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20018000 	.word	0x20018000
 8001784:	00000400 	.word	0x00000400
 8001788:	2000008c 	.word	0x2000008c
 800178c:	20000198 	.word	0x20000198

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ba:	490e      	ldr	r1, [pc, #56]	; (80017f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d0:	4c0b      	ldr	r4, [pc, #44]	; (8001800 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017de:	f7ff ffd7 	bl	8001790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f002 fc73 	bl	80040cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e6:	f7ff fc47 	bl	8001078 <main>
  bx  lr    
 80017ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017f8:	08004a9c 	.word	0x08004a9c
  ldr r2, =_sbss
 80017fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001800:	20000194 	.word	0x20000194

08001804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_Init+0x40>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_Init+0x40>)
 800181e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_Init+0x40>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f931 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fdf0 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f93b 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f911 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000180 	.word	0x20000180

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000180 	.word	0x20000180

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_Delay+0x44>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffde 	bl	80018d4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000008 	.word	0x20000008

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	; (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff47 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff5c 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffb0 	bl	8001a54 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e159      	b.n	8001dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 8148 	bne.w	8001dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d005      	beq.n	8001b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d130      	bne.n	8001bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 0201 	and.w	r2, r3, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d017      	beq.n	8001bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d123      	bne.n	8001c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80a2 	beq.w	8001dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b57      	ldr	r3, [pc, #348]	; (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a56      	ldr	r2, [pc, #344]	; (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b54      	ldr	r3, [pc, #336]	; (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca2:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_GPIO_Init+0x2ec>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a49      	ldr	r2, [pc, #292]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d019      	beq.n	8001d02 <HAL_GPIO_Init+0x202>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a48      	ldr	r2, [pc, #288]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0x1fe>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a47      	ldr	r2, [pc, #284]	; (8001df8 <HAL_GPIO_Init+0x2f8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00d      	beq.n	8001cfa <HAL_GPIO_Init+0x1fa>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a46      	ldr	r2, [pc, #280]	; (8001dfc <HAL_GPIO_Init+0x2fc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <HAL_GPIO_Init+0x1f6>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a45      	ldr	r2, [pc, #276]	; (8001e00 <HAL_GPIO_Init+0x300>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_GPIO_Init+0x1f2>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x204>
 8001d02:	2300      	movs	r3, #0
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d14:	4935      	ldr	r1, [pc, #212]	; (8001dec <HAL_GPIO_Init+0x2ec>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d22:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d46:	4a2f      	ldr	r2, [pc, #188]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d70:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_GPIO_Init+0x304>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	f67f aea2 	bls.w	8001b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e0bb      	b.n	8001f9c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e24:	2201      	movs	r2, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	f040 80ab 	bne.w	8001f96 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001e40:	4a5c      	ldr	r2, [pc, #368]	; (8001fb4 <HAL_GPIO_DeInit+0x1ac>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a54      	ldr	r2, [pc, #336]	; (8001fb8 <HAL_GPIO_DeInit+0x1b0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_DeInit+0x96>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a53      	ldr	r2, [pc, #332]	; (8001fbc <HAL_GPIO_DeInit+0x1b4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_DeInit+0x92>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_GPIO_DeInit+0x1b8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_DeInit+0x8e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a51      	ldr	r2, [pc, #324]	; (8001fc4 <HAL_GPIO_DeInit+0x1bc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_DeInit+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a50      	ldr	r2, [pc, #320]	; (8001fc8 <HAL_GPIO_DeInit+0x1c0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_DeInit+0x86>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_DeInit+0x98>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_DeInit+0x98>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_DeInit+0x98>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_DeInit+0x98>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_DeInit+0x98>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d132      	bne.n	8001f16 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_GPIO_DeInit+0x1c4>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	4944      	ldr	r1, [pc, #272]	; (8001fcc <HAL_GPIO_DeInit+0x1c4>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ebe:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_GPIO_DeInit+0x1c4>)
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4941      	ldr	r1, [pc, #260]	; (8001fcc <HAL_GPIO_DeInit+0x1c4>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_GPIO_DeInit+0x1c4>)
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	493d      	ldr	r1, [pc, #244]	; (8001fcc <HAL_GPIO_DeInit+0x1c4>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001eda:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_GPIO_DeInit+0x1c4>)
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	493a      	ldr	r1, [pc, #232]	; (8001fcc <HAL_GPIO_DeInit+0x1c4>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ef8:	4a2e      	ldr	r2, [pc, #184]	; (8001fb4 <HAL_GPIO_DeInit+0x1ac>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	43da      	mvns	r2, r3
 8001f08:	482a      	ldr	r0, [pc, #168]	; (8001fb4 <HAL_GPIO_DeInit+0x1ac>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	400a      	ands	r2, r1
 8001f10:	3302      	adds	r3, #2
 8001f12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2103      	movs	r1, #3
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	08da      	lsrs	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3208      	adds	r2, #8
 8001f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	08d2      	lsrs	r2, r2, #3
 8001f4c:	4019      	ands	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2103      	movs	r1, #3
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	2101      	movs	r1, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2103      	movs	r1, #3
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	401a      	ands	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	f67f af40 	bls.w	8001e24 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e264      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d075      	beq.n	800213e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002052:	4ba3      	ldr	r3, [pc, #652]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b04      	cmp	r3, #4
 800205c:	d00c      	beq.n	8002078 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4ba0      	ldr	r3, [pc, #640]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002066:	2b08      	cmp	r3, #8
 8002068:	d112      	bne.n	8002090 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206a:	4b9d      	ldr	r3, [pc, #628]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002076:	d10b      	bne.n	8002090 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	4b99      	ldr	r3, [pc, #612]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d05b      	beq.n	800213c <HAL_RCC_OscConfig+0x108>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d157      	bne.n	800213c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e23f      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d106      	bne.n	80020a8 <HAL_RCC_OscConfig+0x74>
 800209a:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a90      	ldr	r2, [pc, #576]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0xb0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x98>
 80020b2:	4b8b      	ldr	r3, [pc, #556]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a8a      	ldr	r2, [pc, #552]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b88      	ldr	r3, [pc, #544]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a87      	ldr	r2, [pc, #540]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0xb0>
 80020cc:	4b84      	ldr	r3, [pc, #528]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a83      	ldr	r2, [pc, #524]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b81      	ldr	r3, [pc, #516]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a80      	ldr	r2, [pc, #512]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fbf2 	bl	80018d4 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f4:	f7ff fbee 	bl	80018d4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e204      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xc0>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fbde 	bl	80018d4 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fbda 	bl	80018d4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1f0      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	4b6c      	ldr	r3, [pc, #432]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0xe8>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214a:	4b65      	ldr	r3, [pc, #404]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00b      	beq.n	800216e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d11c      	bne.n	800219c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d116      	bne.n	800219c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_RCC_OscConfig+0x152>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d001      	beq.n	8002186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e1c4      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b56      	ldr	r3, [pc, #344]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4952      	ldr	r1, [pc, #328]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	e03a      	b.n	8002212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a4:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <HAL_RCC_OscConfig+0x2b0>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7ff fb93 	bl	80018d4 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b2:	f7ff fb8f 	bl	80018d4 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e1a5      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4940      	ldr	r1, [pc, #256]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <HAL_RCC_OscConfig+0x2b0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7ff fb72 	bl	80018d4 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f4:	f7ff fb6e 	bl	80018d4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e184      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d030      	beq.n	8002280 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d016      	beq.n	8002254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_RCC_OscConfig+0x2b4>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff fb52 	bl	80018d4 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002234:	f7ff fb4e 	bl	80018d4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e164      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x200>
 8002252:	e015      	b.n	8002280 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_RCC_OscConfig+0x2b4>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb3b 	bl	80018d4 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002262:	f7ff fb37 	bl	80018d4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e14d      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a0 	beq.w	80023ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x2b8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d121      	bne.n	800230e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_RCC_OscConfig+0x2b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_RCC_OscConfig+0x2b8>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7ff fafd 	bl	80018d4 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e011      	b.n	8002302 <HAL_RCC_OscConfig+0x2ce>
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	42470000 	.word	0x42470000
 80022e8:	42470e80 	.word	0x42470e80
 80022ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f0:	f7ff faf0 	bl	80018d4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e106      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b85      	ldr	r3, [pc, #532]	; (8002518 <HAL_RCC_OscConfig+0x4e4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x2f0>
 8002316:	4b81      	ldr	r3, [pc, #516]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	4a80      	ldr	r2, [pc, #512]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6713      	str	r3, [r2, #112]	; 0x70
 8002322:	e01c      	b.n	800235e <HAL_RCC_OscConfig+0x32a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d10c      	bne.n	8002346 <HAL_RCC_OscConfig+0x312>
 800232c:	4b7b      	ldr	r3, [pc, #492]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a7a      	ldr	r2, [pc, #488]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	4b78      	ldr	r3, [pc, #480]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	4a77      	ldr	r2, [pc, #476]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	; 0x70
 8002344:	e00b      	b.n	800235e <HAL_RCC_OscConfig+0x32a>
 8002346:	4b75      	ldr	r3, [pc, #468]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a74      	ldr	r2, [pc, #464]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
 8002352:	4b72      	ldr	r3, [pc, #456]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	4a71      	ldr	r2, [pc, #452]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d015      	beq.n	8002392 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7ff fab5 	bl	80018d4 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7ff fab1 	bl	80018d4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0c5      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ee      	beq.n	800236e <HAL_RCC_OscConfig+0x33a>
 8002390:	e014      	b.n	80023bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7ff fa9f 	bl	80018d4 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff fa9b 	bl	80018d4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0af      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	4b5a      	ldr	r3, [pc, #360]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ee      	bne.n	800239a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b56      	ldr	r3, [pc, #344]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a55      	ldr	r2, [pc, #340]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 809b 	beq.w	800250e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d05c      	beq.n	800249e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d141      	bne.n	8002470 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_OscConfig+0x4ec>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7ff fa6f 	bl	80018d4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7ff fa6b 	bl	80018d4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e081      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240c:	4b43      	ldr	r3, [pc, #268]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	3b01      	subs	r3, #1
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	4937      	ldr	r1, [pc, #220]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_OscConfig+0x4ec>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7ff fa44 	bl	80018d4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7ff fa40 	bl	80018d4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e056      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x41c>
 800246e:	e04e      	b.n	800250e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_OscConfig+0x4ec>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7ff fa2d 	bl	80018d4 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247e:	f7ff fa29 	bl	80018d4 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e03f      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f0      	bne.n	800247e <HAL_RCC_OscConfig+0x44a>
 800249c:	e037      	b.n	800250e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e032      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <HAL_RCC_OscConfig+0x4e8>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d028      	beq.n	800250a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d121      	bne.n	800250a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d11a      	bne.n	800250a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024da:	4013      	ands	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d111      	bne.n	800250a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	3b01      	subs	r3, #1
 80024f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40007000 	.word	0x40007000
 800251c:	40023800 	.word	0x40023800
 8002520:	42470060 	.word	0x42470060

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0cc      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b68      	ldr	r3, [pc, #416]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d90c      	bls.n	8002560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b65      	ldr	r3, [pc, #404]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d044      	beq.n	8002644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d119      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e06f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e067      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4934      	ldr	r1, [pc, #208]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002614:	f7ff f95e 	bl	80018d4 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7ff f95a 	bl	80018d4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d20c      	bcs.n	800266c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f8be 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08004a40 	.word	0x08004a40
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	2300      	movs	r3, #0
 8002702:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002708:	4b67      	ldr	r3, [pc, #412]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d00d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x40>
 8002714:	2b08      	cmp	r3, #8
 8002716:	f200 80bd 	bhi.w	8002894 <HAL_RCC_GetSysClockFreq+0x1a4>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 800271e:	2b04      	cmp	r3, #4
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x3a>
 8002722:	e0b7      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b61      	ldr	r3, [pc, #388]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002726:	60bb      	str	r3, [r7, #8]
       break;
 8002728:	e0b7      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272a:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800272c:	60bb      	str	r3, [r7, #8]
      break;
 800272e:	e0b4      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4b5d      	ldr	r3, [pc, #372]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002738:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273a:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d04d      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002746:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	461a      	mov	r2, r3
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	ea02 0800 	and.w	r8, r2, r0
 800275e:	ea03 0901 	and.w	r9, r3, r1
 8002762:	4640      	mov	r0, r8
 8002764:	4649      	mov	r1, r9
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	014b      	lsls	r3, r1, #5
 8002770:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002774:	0142      	lsls	r2, r0, #5
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	ebb0 0008 	subs.w	r0, r0, r8
 800277e:	eb61 0109 	sbc.w	r1, r1, r9
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	018b      	lsls	r3, r1, #6
 800278c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002790:	0182      	lsls	r2, r0, #6
 8002792:	1a12      	subs	r2, r2, r0
 8002794:	eb63 0301 	sbc.w	r3, r3, r1
 8002798:	f04f 0000 	mov.w	r0, #0
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	00d9      	lsls	r1, r3, #3
 80027a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027a6:	00d0      	lsls	r0, r2, #3
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	eb12 0208 	adds.w	r2, r2, r8
 80027b0:	eb43 0309 	adc.w	r3, r3, r9
 80027b4:	f04f 0000 	mov.w	r0, #0
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	0259      	lsls	r1, r3, #9
 80027be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80027c2:	0250      	lsls	r0, r2, #9
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	f7fd fd5c 	bl	8000290 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e04a      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	461a      	mov	r2, r3
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	ea02 0400 	and.w	r4, r2, r0
 80027fa:	ea03 0501 	and.w	r5, r3, r1
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	014b      	lsls	r3, r1, #5
 800280c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002810:	0142      	lsls	r2, r0, #5
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	1b00      	subs	r0, r0, r4
 8002818:	eb61 0105 	sbc.w	r1, r1, r5
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	018b      	lsls	r3, r1, #6
 8002826:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800282a:	0182      	lsls	r2, r0, #6
 800282c:	1a12      	subs	r2, r2, r0
 800282e:	eb63 0301 	sbc.w	r3, r3, r1
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	00d9      	lsls	r1, r3, #3
 800283c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002840:	00d0      	lsls	r0, r2, #3
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	1912      	adds	r2, r2, r4
 8002848:	eb45 0303 	adc.w	r3, r5, r3
 800284c:	f04f 0000 	mov.w	r0, #0
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	0299      	lsls	r1, r3, #10
 8002856:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800285a:	0290      	lsls	r0, r2, #10
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	461a      	mov	r2, r3
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	f7fd fd10 	bl	8000290 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4613      	mov	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	3301      	adds	r3, #1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	60bb      	str	r3, [r7, #8]
      break;
 8002892:	e002      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002896:	60bb      	str	r3, [r7, #8]
      break;
 8002898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289a:	68bb      	ldr	r3, [r7, #8]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	007a1200 	.word	0x007a1200

080028b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000000 	.word	0x20000000

080028cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0a9b      	lsrs	r3, r3, #10
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	08004a50 	.word	0x08004a50

080028f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028f8:	f7ff ffdc 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	0b5b      	lsrs	r3, r3, #13
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4903      	ldr	r1, [pc, #12]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	08004a50 	.word	0x08004a50

0800291c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e07b      	b.n	8002a26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293e:	d009      	beq.n	8002954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
 8002946:	e005      	b.n	8002954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fd7e 	bl	8001470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	ea42 0103 	orr.w	r1, r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0104 	and.w	r1, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	f003 0210 	and.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e01a      	b.n	8002a76 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a56:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fe fd71 	bl	8001540 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b088      	sub	sp, #32
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_SPI_Transmit+0x22>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e126      	b.n	8002cee <HAL_SPI_Transmit+0x270>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aa8:	f7fe ff14 	bl	80018d4 <HAL_GetTick>
 8002aac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d002      	beq.n	8002ac4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac2:	e10b      	b.n	8002cdc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_SPI_Transmit+0x52>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ad4:	e102      	b.n	8002cdc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1c:	d10f      	bne.n	8002b3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d007      	beq.n	8002b5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b64:	d14b      	bne.n	8002bfe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_SPI_Transmit+0xf6>
 8002b6e:	8afb      	ldrh	r3, [r7, #22]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d13e      	bne.n	8002bf2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	1c9a      	adds	r2, r3, #2
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b98:	e02b      	b.n	8002bf2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d112      	bne.n	8002bce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	881a      	ldrh	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	1c9a      	adds	r2, r3, #2
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bcc:	e011      	b.n	8002bf2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bce:	f7fe fe81 	bl	80018d4 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d803      	bhi.n	8002be6 <HAL_SPI_Transmit+0x168>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d102      	bne.n	8002bec <HAL_SPI_Transmit+0x16e>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bf0:	e074      	b.n	8002cdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1ce      	bne.n	8002b9a <HAL_SPI_Transmit+0x11c>
 8002bfc:	e04c      	b.n	8002c98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_SPI_Transmit+0x18e>
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d140      	bne.n	8002c8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c32:	e02c      	b.n	8002c8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d113      	bne.n	8002c6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	7812      	ldrb	r2, [r2, #0]
 8002c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c68:	e011      	b.n	8002c8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c6a:	f7fe fe33 	bl	80018d4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d803      	bhi.n	8002c82 <HAL_SPI_Transmit+0x204>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d102      	bne.n	8002c88 <HAL_SPI_Transmit+0x20a>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c8c:	e026      	b.n	8002cdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1cd      	bne.n	8002c34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fa55 	bl	800314c <SPI_EndRxTxTransaction>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e000      	b.n	8002cdc <HAL_SPI_Transmit+0x25e>
  }

error:
 8002cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b08c      	sub	sp, #48	; 0x30
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d04:	2301      	movs	r3, #1
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x26>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e18a      	b.n	8003032 <HAL_SPI_TransmitReceive+0x33c>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d24:	f7fe fdd6 	bl	80018d4 <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d3a:	887b      	ldrh	r3, [r7, #2]
 8002d3c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d00f      	beq.n	8002d66 <HAL_SPI_TransmitReceive+0x70>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4c:	d107      	bne.n	8002d5e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_SPI_TransmitReceive+0x68>
 8002d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d003      	beq.n	8002d66 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d64:	e15b      	b.n	800301e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x82>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x82>
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d103      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d7e:	e14e      	b.n	800301e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d003      	beq.n	8002d94 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2205      	movs	r2, #5
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	887a      	ldrh	r2, [r7, #2]
 8002db6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d007      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df0:	d178      	bne.n	8002ee4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_SPI_TransmitReceive+0x10a>
 8002dfa:	8b7b      	ldrh	r3, [r7, #26]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d166      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	881a      	ldrh	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	1c9a      	adds	r2, r3, #2
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e24:	e053      	b.n	8002ece <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d11b      	bne.n	8002e6c <HAL_SPI_TransmitReceive+0x176>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <HAL_SPI_TransmitReceive+0x176>
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d113      	bne.n	8002e6c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	1c9a      	adds	r2, r3, #2
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d119      	bne.n	8002eae <HAL_SPI_TransmitReceive+0x1b8>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d014      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	1c9a      	adds	r2, r3, #2
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eae:	f7fe fd11 	bl	80018d4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d807      	bhi.n	8002ece <HAL_SPI_TransmitReceive+0x1d8>
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d003      	beq.n	8002ece <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ecc:	e0a7      	b.n	800301e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1a6      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x130>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1a1      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x130>
 8002ee2:	e07c      	b.n	8002fde <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_TransmitReceive+0x1fc>
 8002eec:	8b7b      	ldrh	r3, [r7, #26]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d16b      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f18:	e057      	b.n	8002fca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d11c      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x26c>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x26c>
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d114      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d119      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x2ae>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d014      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fa4:	f7fe fc96 	bl	80018d4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d803      	bhi.n	8002fbc <HAL_SPI_TransmitReceive+0x2c6>
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d102      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x2cc>
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fc8:	e029      	b.n	800301e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1a2      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x224>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d19d      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8b2 	bl	800314c <SPI_EndRxTxTransaction>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ffa:	e010      	b.n	800301e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	e000      	b.n	800301e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800301c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800302e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003032:	4618      	mov	r0, r3
 8003034:	3730      	adds	r7, #48	; 0x30
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800304c:	f7fe fc42 	bl	80018d4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4413      	add	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800305c:	f7fe fc3a 	bl	80018d4 <HAL_GetTick>
 8003060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003062:	4b39      	ldr	r3, [pc, #228]	; (8003148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	015b      	lsls	r3, r3, #5
 8003068:	0d1b      	lsrs	r3, r3, #20
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003072:	e054      	b.n	800311e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d050      	beq.n	800311e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800307c:	f7fe fc2a 	bl	80018d4 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	429a      	cmp	r2, r3
 800308a:	d902      	bls.n	8003092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d13d      	bne.n	800310e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030aa:	d111      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b4:	d004      	beq.n	80030c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d107      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d8:	d10f      	bne.n	80030fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e017      	b.n	800313e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3b01      	subs	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4013      	ands	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	429a      	cmp	r2, r3
 800313a:	d19b      	bne.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000000 	.word	0x20000000

0800314c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <SPI_EndRxTxTransaction+0x7c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <SPI_EndRxTxTransaction+0x80>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0d5b      	lsrs	r3, r3, #21
 8003164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003176:	d112      	bne.n	800319e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2200      	movs	r2, #0
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff ff5a 	bl	800303c <SPI_WaitFlagStateUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e00f      	b.n	80031be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d0f2      	beq.n	800319e <SPI_EndRxTxTransaction+0x52>
 80031b8:	e000      	b.n	80031bc <SPI_EndRxTxTransaction+0x70>
        break;
 80031ba:	bf00      	nop
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000
 80031cc:	165e9f81 	.word	0x165e9f81

080031d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e041      	b.n	8003266 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe f9c6 	bl	8001588 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 f9a0 	bl	8003554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d109      	bne.n	8003294 <HAL_TIM_PWM_Start+0x24>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	bf14      	ite	ne
 800328c:	2301      	movne	r3, #1
 800328e:	2300      	moveq	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e022      	b.n	80032da <HAL_TIM_PWM_Start+0x6a>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d109      	bne.n	80032ae <HAL_TIM_PWM_Start+0x3e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	bf14      	ite	ne
 80032a6:	2301      	movne	r3, #1
 80032a8:	2300      	moveq	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	e015      	b.n	80032da <HAL_TIM_PWM_Start+0x6a>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d109      	bne.n	80032c8 <HAL_TIM_PWM_Start+0x58>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e008      	b.n	80032da <HAL_TIM_PWM_Start+0x6a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e068      	b.n	80033b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <HAL_TIM_PWM_Start+0x82>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f0:	e013      	b.n	800331a <HAL_TIM_PWM_Start+0xaa>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d104      	bne.n	8003302 <HAL_TIM_PWM_Start+0x92>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003300:	e00b      	b.n	800331a <HAL_TIM_PWM_Start+0xaa>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d104      	bne.n	8003312 <HAL_TIM_PWM_Start+0xa2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003310:	e003      	b.n	800331a <HAL_TIM_PWM_Start+0xaa>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2201      	movs	r2, #1
 8003320:	6839      	ldr	r1, [r7, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fb22 	bl	800396c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <HAL_TIM_PWM_Start+0x14c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d107      	bne.n	8003342 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_TIM_PWM_Start+0x14c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_TIM_PWM_Start+0x10e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d013      	beq.n	800337e <HAL_TIM_PWM_Start+0x10e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_TIM_PWM_Start+0x150>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIM_PWM_Start+0x10e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_TIM_PWM_Start+0x154>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIM_PWM_Start+0x10e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <HAL_TIM_PWM_Start+0x158>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIM_PWM_Start+0x10e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_TIM_PWM_Start+0x15c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b06      	cmp	r3, #6
 800338e:	d010      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	e007      	b.n	80033b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40014000 	.word	0x40014000

080033d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e0ae      	b.n	800354c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	f200 809f 	bhi.w	800353c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033fe:	a201      	add	r2, pc, #4	; (adr r2, 8003404 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003439 	.word	0x08003439
 8003408:	0800353d 	.word	0x0800353d
 800340c:	0800353d 	.word	0x0800353d
 8003410:	0800353d 	.word	0x0800353d
 8003414:	08003479 	.word	0x08003479
 8003418:	0800353d 	.word	0x0800353d
 800341c:	0800353d 	.word	0x0800353d
 8003420:	0800353d 	.word	0x0800353d
 8003424:	080034bb 	.word	0x080034bb
 8003428:	0800353d 	.word	0x0800353d
 800342c:	0800353d 	.word	0x0800353d
 8003430:	0800353d 	.word	0x0800353d
 8003434:	080034fb 	.word	0x080034fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f908 	bl	8003654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0208 	orr.w	r2, r2, #8
 8003452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0204 	bic.w	r2, r2, #4
 8003462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6999      	ldr	r1, [r3, #24]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	619a      	str	r2, [r3, #24]
      break;
 8003476:	e064      	b.n	8003542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f94e 	bl	8003720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6999      	ldr	r1, [r3, #24]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	021a      	lsls	r2, r3, #8
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	619a      	str	r2, [r3, #24]
      break;
 80034b8:	e043      	b.n	8003542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f999 	bl	80037f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0208 	orr.w	r2, r2, #8
 80034d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0204 	bic.w	r2, r2, #4
 80034e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69d9      	ldr	r1, [r3, #28]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	61da      	str	r2, [r3, #28]
      break;
 80034f8:	e023      	b.n	8003542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f9e3 	bl	80038cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69d9      	ldr	r1, [r3, #28]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	021a      	lsls	r2, r3, #8
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	61da      	str	r2, [r3, #28]
      break;
 800353a:	e002      	b.n	8003542 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	75fb      	strb	r3, [r7, #23]
      break;
 8003540:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800354a:	7dfb      	ldrb	r3, [r7, #23]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a34      	ldr	r2, [pc, #208]	; (8003638 <TIM_Base_SetConfig+0xe4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00f      	beq.n	800358c <TIM_Base_SetConfig+0x38>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003572:	d00b      	beq.n	800358c <TIM_Base_SetConfig+0x38>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a31      	ldr	r2, [pc, #196]	; (800363c <TIM_Base_SetConfig+0xe8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <TIM_Base_SetConfig+0x38>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a30      	ldr	r2, [pc, #192]	; (8003640 <TIM_Base_SetConfig+0xec>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0x38>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <TIM_Base_SetConfig+0xf0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d108      	bne.n	800359e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <TIM_Base_SetConfig+0xe4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01b      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d017      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <TIM_Base_SetConfig+0xe8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a21      	ldr	r2, [pc, #132]	; (8003640 <TIM_Base_SetConfig+0xec>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00f      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a20      	ldr	r2, [pc, #128]	; (8003644 <TIM_Base_SetConfig+0xf0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <TIM_Base_SetConfig+0xf4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <TIM_Base_SetConfig+0xf8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <TIM_Base_SetConfig+0xfc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <TIM_Base_SetConfig+0xe4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800
 8003644:	40000c00 	.word	0x40000c00
 8003648:	40014000 	.word	0x40014000
 800364c:	40014400 	.word	0x40014400
 8003650:	40014800 	.word	0x40014800

08003654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f023 0201 	bic.w	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 0302 	bic.w	r3, r3, #2
 800369c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1c      	ldr	r2, [pc, #112]	; (800371c <TIM_OC1_SetConfig+0xc8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10c      	bne.n	80036ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0308 	bic.w	r3, r3, #8
 80036b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <TIM_OC1_SetConfig+0xc8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d111      	bne.n	80036f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	621a      	str	r2, [r3, #32]
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40010000 	.word	0x40010000

08003720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0210 	bic.w	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0320 	bic.w	r3, r3, #32
 800376a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <TIM_OC2_SetConfig+0xd4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10d      	bne.n	800379c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <TIM_OC2_SetConfig+0xd4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d113      	bne.n	80037cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000

080037f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <TIM_OC3_SetConfig+0xd0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10d      	bne.n	8003872 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800385c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a14      	ldr	r2, [pc, #80]	; (80038c8 <TIM_OC3_SetConfig+0xd0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d113      	bne.n	80038a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	621a      	str	r2, [r3, #32]
}
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40010000 	.word	0x40010000

080038cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	031b      	lsls	r3, r3, #12
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <TIM_OC4_SetConfig+0x9c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d109      	bne.n	8003940 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	019b      	lsls	r3, r3, #6
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	621a      	str	r2, [r3, #32]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40010000 	.word	0x40010000

0800396c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2201      	movs	r2, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1a      	ldr	r2, [r3, #32]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1a      	ldr	r2, [r3, #32]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e050      	b.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1c      	ldr	r2, [pc, #112]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d013      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10c      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40014000 	.word	0x40014000

08003a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e03f      	b.n	8003b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd fdc0 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f929 	bl	8003d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b08a      	sub	sp, #40	; 0x28
 8003b32:	af02      	add	r7, sp, #8
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d17c      	bne.n	8003c48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_UART_Transmit+0x2c>
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e075      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_UART_Transmit+0x3e>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e06e      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2221      	movs	r2, #33	; 0x21
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b82:	f7fd fea7 	bl	80018d4 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9c:	d108      	bne.n	8003bb0 <HAL_UART_Transmit+0x82>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d104      	bne.n	8003bb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	e003      	b.n	8003bb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bc0:	e02a      	b.n	8003c18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f840 	bl	8003c52 <UART_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e036      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	e007      	b.n	8003c0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	3301      	adds	r3, #1
 8003c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1cf      	bne.n	8003bc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2140      	movs	r1, #64	; 0x40
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f810 	bl	8003c52 <UART_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e006      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b090      	sub	sp, #64	; 0x40
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c62:	e050      	b.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d04c      	beq.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c72:	f7fd fe2f 	bl	80018d4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d241      	bcs.n	8003d06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ca2:	637a      	str	r2, [r7, #52]	; 0x34
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3314      	adds	r3, #20
 8003cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd6:	623a      	str	r2, [r7, #32]
 8003cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	69f9      	ldr	r1, [r7, #28]
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e5      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d09f      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3740      	adds	r7, #64	; 0x40
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	b09f      	sub	sp, #124	; 0x7c
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	68d9      	ldr	r1, [r3, #12]
 8003d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	ea40 0301 	orr.w	r3, r0, r1
 8003d50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d74:	f021 010c 	bic.w	r1, r1, #12
 8003d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	6999      	ldr	r1, [r3, #24]
 8003d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	ea40 0301 	orr.w	r3, r0, r1
 8003d98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4bc5      	ldr	r3, [pc, #788]	; (80040b4 <UART_SetConfig+0x384>)
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d004      	beq.n	8003dae <UART_SetConfig+0x7e>
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4bc3      	ldr	r3, [pc, #780]	; (80040b8 <UART_SetConfig+0x388>)
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d103      	bne.n	8003db6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dae:	f7fe fda1 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 8003db2:	6778      	str	r0, [r7, #116]	; 0x74
 8003db4:	e002      	b.n	8003dbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003db6:	f7fe fd89 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8003dba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc4:	f040 80b6 	bne.w	8003f34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dca:	461c      	mov	r4, r3
 8003dcc:	f04f 0500 	mov.w	r5, #0
 8003dd0:	4622      	mov	r2, r4
 8003dd2:	462b      	mov	r3, r5
 8003dd4:	1891      	adds	r1, r2, r2
 8003dd6:	6439      	str	r1, [r7, #64]	; 0x40
 8003dd8:	415b      	adcs	r3, r3
 8003dda:	647b      	str	r3, [r7, #68]	; 0x44
 8003ddc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003de0:	1912      	adds	r2, r2, r4
 8003de2:	eb45 0303 	adc.w	r3, r5, r3
 8003de6:	f04f 0000 	mov.w	r0, #0
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	00d9      	lsls	r1, r3, #3
 8003df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003df4:	00d0      	lsls	r0, r2, #3
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	1911      	adds	r1, r2, r4
 8003dfc:	6639      	str	r1, [r7, #96]	; 0x60
 8003dfe:	416b      	adcs	r3, r5
 8003e00:	667b      	str	r3, [r7, #100]	; 0x64
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	1891      	adds	r1, r2, r2
 8003e0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e10:	415b      	adcs	r3, r3
 8003e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e1c:	f7fc fa38 	bl	8000290 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4ba5      	ldr	r3, [pc, #660]	; (80040bc <UART_SetConfig+0x38c>)
 8003e26:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	011e      	lsls	r6, r3, #4
 8003e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e30:	461c      	mov	r4, r3
 8003e32:	f04f 0500 	mov.w	r5, #0
 8003e36:	4622      	mov	r2, r4
 8003e38:	462b      	mov	r3, r5
 8003e3a:	1891      	adds	r1, r2, r2
 8003e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e3e:	415b      	adcs	r3, r3
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
 8003e42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e46:	1912      	adds	r2, r2, r4
 8003e48:	eb45 0303 	adc.w	r3, r5, r3
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	00d9      	lsls	r1, r3, #3
 8003e56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e5a:	00d0      	lsls	r0, r2, #3
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	1911      	adds	r1, r2, r4
 8003e62:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e64:	416b      	adcs	r3, r5
 8003e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	1891      	adds	r1, r2, r2
 8003e74:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e76:	415b      	adcs	r3, r3
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e82:	f7fc fa05 	bl	8000290 <__aeabi_uldivmod>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4b8c      	ldr	r3, [pc, #560]	; (80040bc <UART_SetConfig+0x38c>)
 8003e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	2164      	movs	r1, #100	; 0x64
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	3332      	adds	r3, #50	; 0x32
 8003e9e:	4a87      	ldr	r2, [pc, #540]	; (80040bc <UART_SetConfig+0x38c>)
 8003ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eac:	441e      	add	r6, r3
 8003eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	1894      	adds	r4, r2, r2
 8003ebc:	623c      	str	r4, [r7, #32]
 8003ebe:	415b      	adcs	r3, r3
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ec6:	1812      	adds	r2, r2, r0
 8003ec8:	eb41 0303 	adc.w	r3, r1, r3
 8003ecc:	f04f 0400 	mov.w	r4, #0
 8003ed0:	f04f 0500 	mov.w	r5, #0
 8003ed4:	00dd      	lsls	r5, r3, #3
 8003ed6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eda:	00d4      	lsls	r4, r2, #3
 8003edc:	4622      	mov	r2, r4
 8003ede:	462b      	mov	r3, r5
 8003ee0:	1814      	adds	r4, r2, r0
 8003ee2:	653c      	str	r4, [r7, #80]	; 0x50
 8003ee4:	414b      	adcs	r3, r1
 8003ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	1891      	adds	r1, r2, r2
 8003ef4:	61b9      	str	r1, [r7, #24]
 8003ef6:	415b      	adcs	r3, r3
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f02:	f7fc f9c5 	bl	8000290 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4b6c      	ldr	r3, [pc, #432]	; (80040bc <UART_SetConfig+0x38c>)
 8003f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2164      	movs	r1, #100	; 0x64
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	3332      	adds	r3, #50	; 0x32
 8003f1e:	4a67      	ldr	r2, [pc, #412]	; (80040bc <UART_SetConfig+0x38c>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 0207 	and.w	r2, r3, #7
 8003f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4432      	add	r2, r6
 8003f30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f32:	e0b9      	b.n	80040a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f36:	461c      	mov	r4, r3
 8003f38:	f04f 0500 	mov.w	r5, #0
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	462b      	mov	r3, r5
 8003f40:	1891      	adds	r1, r2, r2
 8003f42:	6139      	str	r1, [r7, #16]
 8003f44:	415b      	adcs	r3, r3
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f4c:	1912      	adds	r2, r2, r4
 8003f4e:	eb45 0303 	adc.w	r3, r5, r3
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	00d9      	lsls	r1, r3, #3
 8003f5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f60:	00d0      	lsls	r0, r2, #3
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	eb12 0804 	adds.w	r8, r2, r4
 8003f6a:	eb43 0905 	adc.w	r9, r3, r5
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	008b      	lsls	r3, r1, #2
 8003f82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f86:	0082      	lsls	r2, r0, #2
 8003f88:	4640      	mov	r0, r8
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	f7fc f980 	bl	8000290 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4b49      	ldr	r3, [pc, #292]	; (80040bc <UART_SetConfig+0x38c>)
 8003f96:	fba3 2302 	umull	r2, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	011e      	lsls	r6, r3, #4
 8003f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	1894      	adds	r4, r2, r2
 8003fac:	60bc      	str	r4, [r7, #8]
 8003fae:	415b      	adcs	r3, r3
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb6:	1812      	adds	r2, r2, r0
 8003fb8:	eb41 0303 	adc.w	r3, r1, r3
 8003fbc:	f04f 0400 	mov.w	r4, #0
 8003fc0:	f04f 0500 	mov.w	r5, #0
 8003fc4:	00dd      	lsls	r5, r3, #3
 8003fc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fca:	00d4      	lsls	r4, r2, #3
 8003fcc:	4622      	mov	r2, r4
 8003fce:	462b      	mov	r3, r5
 8003fd0:	1814      	adds	r4, r2, r0
 8003fd2:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fd4:	414b      	adcs	r3, r1
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	008b      	lsls	r3, r1, #2
 8003fec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ff0:	0082      	lsls	r2, r0, #2
 8003ff2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ff6:	f7fc f94b 	bl	8000290 <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4b2f      	ldr	r3, [pc, #188]	; (80040bc <UART_SetConfig+0x38c>)
 8004000:	fba3 1302 	umull	r1, r3, r3, r2
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	2164      	movs	r1, #100	; 0x64
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	3332      	adds	r3, #50	; 0x32
 8004012:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <UART_SetConfig+0x38c>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401e:	441e      	add	r6, r3
 8004020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004022:	4618      	mov	r0, r3
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	1894      	adds	r4, r2, r2
 800402e:	603c      	str	r4, [r7, #0]
 8004030:	415b      	adcs	r3, r3
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004038:	1812      	adds	r2, r2, r0
 800403a:	eb41 0303 	adc.w	r3, r1, r3
 800403e:	f04f 0400 	mov.w	r4, #0
 8004042:	f04f 0500 	mov.w	r5, #0
 8004046:	00dd      	lsls	r5, r3, #3
 8004048:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800404c:	00d4      	lsls	r4, r2, #3
 800404e:	4622      	mov	r2, r4
 8004050:	462b      	mov	r3, r5
 8004052:	eb12 0a00 	adds.w	sl, r2, r0
 8004056:	eb43 0b01 	adc.w	fp, r3, r1
 800405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	008b      	lsls	r3, r1, #2
 800406e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004072:	0082      	lsls	r2, r0, #2
 8004074:	4650      	mov	r0, sl
 8004076:	4659      	mov	r1, fp
 8004078:	f7fc f90a 	bl	8000290 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <UART_SetConfig+0x38c>)
 8004082:	fba3 1302 	umull	r1, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2164      	movs	r1, #100	; 0x64
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	4a09      	ldr	r2, [pc, #36]	; (80040bc <UART_SetConfig+0x38c>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4432      	add	r2, r6
 80040a6:	609a      	str	r2, [r3, #8]
}
 80040a8:	bf00      	nop
 80040aa:	377c      	adds	r7, #124	; 0x7c
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b2:	bf00      	nop
 80040b4:	40011000 	.word	0x40011000
 80040b8:	40011400 	.word	0x40011400
 80040bc:	51eb851f 	.word	0x51eb851f

080040c0 <__errno>:
 80040c0:	4b01      	ldr	r3, [pc, #4]	; (80040c8 <__errno+0x8>)
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	2000000c 	.word	0x2000000c

080040cc <__libc_init_array>:
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4d0d      	ldr	r5, [pc, #52]	; (8004104 <__libc_init_array+0x38>)
 80040d0:	4c0d      	ldr	r4, [pc, #52]	; (8004108 <__libc_init_array+0x3c>)
 80040d2:	1b64      	subs	r4, r4, r5
 80040d4:	10a4      	asrs	r4, r4, #2
 80040d6:	2600      	movs	r6, #0
 80040d8:	42a6      	cmp	r6, r4
 80040da:	d109      	bne.n	80040f0 <__libc_init_array+0x24>
 80040dc:	4d0b      	ldr	r5, [pc, #44]	; (800410c <__libc_init_array+0x40>)
 80040de:	4c0c      	ldr	r4, [pc, #48]	; (8004110 <__libc_init_array+0x44>)
 80040e0:	f000 fc68 	bl	80049b4 <_init>
 80040e4:	1b64      	subs	r4, r4, r5
 80040e6:	10a4      	asrs	r4, r4, #2
 80040e8:	2600      	movs	r6, #0
 80040ea:	42a6      	cmp	r6, r4
 80040ec:	d105      	bne.n	80040fa <__libc_init_array+0x2e>
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
 80040f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f4:	4798      	blx	r3
 80040f6:	3601      	adds	r6, #1
 80040f8:	e7ee      	b.n	80040d8 <__libc_init_array+0xc>
 80040fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040fe:	4798      	blx	r3
 8004100:	3601      	adds	r6, #1
 8004102:	e7f2      	b.n	80040ea <__libc_init_array+0x1e>
 8004104:	08004a94 	.word	0x08004a94
 8004108:	08004a94 	.word	0x08004a94
 800410c:	08004a94 	.word	0x08004a94
 8004110:	08004a98 	.word	0x08004a98

08004114 <memset>:
 8004114:	4402      	add	r2, r0
 8004116:	4603      	mov	r3, r0
 8004118:	4293      	cmp	r3, r2
 800411a:	d100      	bne.n	800411e <memset+0xa>
 800411c:	4770      	bx	lr
 800411e:	f803 1b01 	strb.w	r1, [r3], #1
 8004122:	e7f9      	b.n	8004118 <memset+0x4>

08004124 <_vsniprintf_r>:
 8004124:	b530      	push	{r4, r5, lr}
 8004126:	1e14      	subs	r4, r2, #0
 8004128:	4605      	mov	r5, r0
 800412a:	b09b      	sub	sp, #108	; 0x6c
 800412c:	4618      	mov	r0, r3
 800412e:	da05      	bge.n	800413c <_vsniprintf_r+0x18>
 8004130:	238b      	movs	r3, #139	; 0x8b
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	b01b      	add	sp, #108	; 0x6c
 800413a:	bd30      	pop	{r4, r5, pc}
 800413c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004140:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004144:	bf14      	ite	ne
 8004146:	f104 33ff 	addne.w	r3, r4, #4294967295
 800414a:	4623      	moveq	r3, r4
 800414c:	9302      	str	r3, [sp, #8]
 800414e:	9305      	str	r3, [sp, #20]
 8004150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004154:	9100      	str	r1, [sp, #0]
 8004156:	9104      	str	r1, [sp, #16]
 8004158:	f8ad 300e 	strh.w	r3, [sp, #14]
 800415c:	4602      	mov	r2, r0
 800415e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004160:	4669      	mov	r1, sp
 8004162:	4628      	mov	r0, r5
 8004164:	f000 f874 	bl	8004250 <_svfiprintf_r>
 8004168:	1c43      	adds	r3, r0, #1
 800416a:	bfbc      	itt	lt
 800416c:	238b      	movlt	r3, #139	; 0x8b
 800416e:	602b      	strlt	r3, [r5, #0]
 8004170:	2c00      	cmp	r4, #0
 8004172:	d0e1      	beq.n	8004138 <_vsniprintf_r+0x14>
 8004174:	9b00      	ldr	r3, [sp, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	e7dd      	b.n	8004138 <_vsniprintf_r+0x14>

0800417c <vsniprintf>:
 800417c:	b507      	push	{r0, r1, r2, lr}
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	460a      	mov	r2, r1
 8004184:	4601      	mov	r1, r0
 8004186:	4803      	ldr	r0, [pc, #12]	; (8004194 <vsniprintf+0x18>)
 8004188:	6800      	ldr	r0, [r0, #0]
 800418a:	f7ff ffcb 	bl	8004124 <_vsniprintf_r>
 800418e:	b003      	add	sp, #12
 8004190:	f85d fb04 	ldr.w	pc, [sp], #4
 8004194:	2000000c 	.word	0x2000000c

08004198 <__ssputs_r>:
 8004198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800419c:	688e      	ldr	r6, [r1, #8]
 800419e:	429e      	cmp	r6, r3
 80041a0:	4682      	mov	sl, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	4690      	mov	r8, r2
 80041a6:	461f      	mov	r7, r3
 80041a8:	d838      	bhi.n	800421c <__ssputs_r+0x84>
 80041aa:	898a      	ldrh	r2, [r1, #12]
 80041ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041b0:	d032      	beq.n	8004218 <__ssputs_r+0x80>
 80041b2:	6825      	ldr	r5, [r4, #0]
 80041b4:	6909      	ldr	r1, [r1, #16]
 80041b6:	eba5 0901 	sub.w	r9, r5, r1
 80041ba:	6965      	ldr	r5, [r4, #20]
 80041bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041c4:	3301      	adds	r3, #1
 80041c6:	444b      	add	r3, r9
 80041c8:	106d      	asrs	r5, r5, #1
 80041ca:	429d      	cmp	r5, r3
 80041cc:	bf38      	it	cc
 80041ce:	461d      	movcc	r5, r3
 80041d0:	0553      	lsls	r3, r2, #21
 80041d2:	d531      	bpl.n	8004238 <__ssputs_r+0xa0>
 80041d4:	4629      	mov	r1, r5
 80041d6:	f000 fb47 	bl	8004868 <_malloc_r>
 80041da:	4606      	mov	r6, r0
 80041dc:	b950      	cbnz	r0, 80041f4 <__ssputs_r+0x5c>
 80041de:	230c      	movs	r3, #12
 80041e0:	f8ca 3000 	str.w	r3, [sl]
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f4:	6921      	ldr	r1, [r4, #16]
 80041f6:	464a      	mov	r2, r9
 80041f8:	f000 fabe 	bl	8004778 <memcpy>
 80041fc:	89a3      	ldrh	r3, [r4, #12]
 80041fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004206:	81a3      	strh	r3, [r4, #12]
 8004208:	6126      	str	r6, [r4, #16]
 800420a:	6165      	str	r5, [r4, #20]
 800420c:	444e      	add	r6, r9
 800420e:	eba5 0509 	sub.w	r5, r5, r9
 8004212:	6026      	str	r6, [r4, #0]
 8004214:	60a5      	str	r5, [r4, #8]
 8004216:	463e      	mov	r6, r7
 8004218:	42be      	cmp	r6, r7
 800421a:	d900      	bls.n	800421e <__ssputs_r+0x86>
 800421c:	463e      	mov	r6, r7
 800421e:	4632      	mov	r2, r6
 8004220:	6820      	ldr	r0, [r4, #0]
 8004222:	4641      	mov	r1, r8
 8004224:	f000 fab6 	bl	8004794 <memmove>
 8004228:	68a3      	ldr	r3, [r4, #8]
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	1b9b      	subs	r3, r3, r6
 800422e:	4432      	add	r2, r6
 8004230:	60a3      	str	r3, [r4, #8]
 8004232:	6022      	str	r2, [r4, #0]
 8004234:	2000      	movs	r0, #0
 8004236:	e7db      	b.n	80041f0 <__ssputs_r+0x58>
 8004238:	462a      	mov	r2, r5
 800423a:	f000 fb6f 	bl	800491c <_realloc_r>
 800423e:	4606      	mov	r6, r0
 8004240:	2800      	cmp	r0, #0
 8004242:	d1e1      	bne.n	8004208 <__ssputs_r+0x70>
 8004244:	6921      	ldr	r1, [r4, #16]
 8004246:	4650      	mov	r0, sl
 8004248:	f000 fabe 	bl	80047c8 <_free_r>
 800424c:	e7c7      	b.n	80041de <__ssputs_r+0x46>
	...

08004250 <_svfiprintf_r>:
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	4698      	mov	r8, r3
 8004256:	898b      	ldrh	r3, [r1, #12]
 8004258:	061b      	lsls	r3, r3, #24
 800425a:	b09d      	sub	sp, #116	; 0x74
 800425c:	4607      	mov	r7, r0
 800425e:	460d      	mov	r5, r1
 8004260:	4614      	mov	r4, r2
 8004262:	d50e      	bpl.n	8004282 <_svfiprintf_r+0x32>
 8004264:	690b      	ldr	r3, [r1, #16]
 8004266:	b963      	cbnz	r3, 8004282 <_svfiprintf_r+0x32>
 8004268:	2140      	movs	r1, #64	; 0x40
 800426a:	f000 fafd 	bl	8004868 <_malloc_r>
 800426e:	6028      	str	r0, [r5, #0]
 8004270:	6128      	str	r0, [r5, #16]
 8004272:	b920      	cbnz	r0, 800427e <_svfiprintf_r+0x2e>
 8004274:	230c      	movs	r3, #12
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	e0d1      	b.n	8004422 <_svfiprintf_r+0x1d2>
 800427e:	2340      	movs	r3, #64	; 0x40
 8004280:	616b      	str	r3, [r5, #20]
 8004282:	2300      	movs	r3, #0
 8004284:	9309      	str	r3, [sp, #36]	; 0x24
 8004286:	2320      	movs	r3, #32
 8004288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800428c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004290:	2330      	movs	r3, #48	; 0x30
 8004292:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800443c <_svfiprintf_r+0x1ec>
 8004296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800429a:	f04f 0901 	mov.w	r9, #1
 800429e:	4623      	mov	r3, r4
 80042a0:	469a      	mov	sl, r3
 80042a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042a6:	b10a      	cbz	r2, 80042ac <_svfiprintf_r+0x5c>
 80042a8:	2a25      	cmp	r2, #37	; 0x25
 80042aa:	d1f9      	bne.n	80042a0 <_svfiprintf_r+0x50>
 80042ac:	ebba 0b04 	subs.w	fp, sl, r4
 80042b0:	d00b      	beq.n	80042ca <_svfiprintf_r+0x7a>
 80042b2:	465b      	mov	r3, fp
 80042b4:	4622      	mov	r2, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	4638      	mov	r0, r7
 80042ba:	f7ff ff6d 	bl	8004198 <__ssputs_r>
 80042be:	3001      	adds	r0, #1
 80042c0:	f000 80aa 	beq.w	8004418 <_svfiprintf_r+0x1c8>
 80042c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042c6:	445a      	add	r2, fp
 80042c8:	9209      	str	r2, [sp, #36]	; 0x24
 80042ca:	f89a 3000 	ldrb.w	r3, [sl]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80a2 	beq.w	8004418 <_svfiprintf_r+0x1c8>
 80042d4:	2300      	movs	r3, #0
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042de:	f10a 0a01 	add.w	sl, sl, #1
 80042e2:	9304      	str	r3, [sp, #16]
 80042e4:	9307      	str	r3, [sp, #28]
 80042e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ea:	931a      	str	r3, [sp, #104]	; 0x68
 80042ec:	4654      	mov	r4, sl
 80042ee:	2205      	movs	r2, #5
 80042f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f4:	4851      	ldr	r0, [pc, #324]	; (800443c <_svfiprintf_r+0x1ec>)
 80042f6:	f7fb ff7b 	bl	80001f0 <memchr>
 80042fa:	9a04      	ldr	r2, [sp, #16]
 80042fc:	b9d8      	cbnz	r0, 8004336 <_svfiprintf_r+0xe6>
 80042fe:	06d0      	lsls	r0, r2, #27
 8004300:	bf44      	itt	mi
 8004302:	2320      	movmi	r3, #32
 8004304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004308:	0711      	lsls	r1, r2, #28
 800430a:	bf44      	itt	mi
 800430c:	232b      	movmi	r3, #43	; 0x2b
 800430e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004312:	f89a 3000 	ldrb.w	r3, [sl]
 8004316:	2b2a      	cmp	r3, #42	; 0x2a
 8004318:	d015      	beq.n	8004346 <_svfiprintf_r+0xf6>
 800431a:	9a07      	ldr	r2, [sp, #28]
 800431c:	4654      	mov	r4, sl
 800431e:	2000      	movs	r0, #0
 8004320:	f04f 0c0a 	mov.w	ip, #10
 8004324:	4621      	mov	r1, r4
 8004326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800432a:	3b30      	subs	r3, #48	; 0x30
 800432c:	2b09      	cmp	r3, #9
 800432e:	d94e      	bls.n	80043ce <_svfiprintf_r+0x17e>
 8004330:	b1b0      	cbz	r0, 8004360 <_svfiprintf_r+0x110>
 8004332:	9207      	str	r2, [sp, #28]
 8004334:	e014      	b.n	8004360 <_svfiprintf_r+0x110>
 8004336:	eba0 0308 	sub.w	r3, r0, r8
 800433a:	fa09 f303 	lsl.w	r3, r9, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	9304      	str	r3, [sp, #16]
 8004342:	46a2      	mov	sl, r4
 8004344:	e7d2      	b.n	80042ec <_svfiprintf_r+0x9c>
 8004346:	9b03      	ldr	r3, [sp, #12]
 8004348:	1d19      	adds	r1, r3, #4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	9103      	str	r1, [sp, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	bfbb      	ittet	lt
 8004352:	425b      	neglt	r3, r3
 8004354:	f042 0202 	orrlt.w	r2, r2, #2
 8004358:	9307      	strge	r3, [sp, #28]
 800435a:	9307      	strlt	r3, [sp, #28]
 800435c:	bfb8      	it	lt
 800435e:	9204      	strlt	r2, [sp, #16]
 8004360:	7823      	ldrb	r3, [r4, #0]
 8004362:	2b2e      	cmp	r3, #46	; 0x2e
 8004364:	d10c      	bne.n	8004380 <_svfiprintf_r+0x130>
 8004366:	7863      	ldrb	r3, [r4, #1]
 8004368:	2b2a      	cmp	r3, #42	; 0x2a
 800436a:	d135      	bne.n	80043d8 <_svfiprintf_r+0x188>
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	1d1a      	adds	r2, r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	9203      	str	r2, [sp, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	bfb8      	it	lt
 8004378:	f04f 33ff 	movlt.w	r3, #4294967295
 800437c:	3402      	adds	r4, #2
 800437e:	9305      	str	r3, [sp, #20]
 8004380:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800444c <_svfiprintf_r+0x1fc>
 8004384:	7821      	ldrb	r1, [r4, #0]
 8004386:	2203      	movs	r2, #3
 8004388:	4650      	mov	r0, sl
 800438a:	f7fb ff31 	bl	80001f0 <memchr>
 800438e:	b140      	cbz	r0, 80043a2 <_svfiprintf_r+0x152>
 8004390:	2340      	movs	r3, #64	; 0x40
 8004392:	eba0 000a 	sub.w	r0, r0, sl
 8004396:	fa03 f000 	lsl.w	r0, r3, r0
 800439a:	9b04      	ldr	r3, [sp, #16]
 800439c:	4303      	orrs	r3, r0
 800439e:	3401      	adds	r4, #1
 80043a0:	9304      	str	r3, [sp, #16]
 80043a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a6:	4826      	ldr	r0, [pc, #152]	; (8004440 <_svfiprintf_r+0x1f0>)
 80043a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043ac:	2206      	movs	r2, #6
 80043ae:	f7fb ff1f 	bl	80001f0 <memchr>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d038      	beq.n	8004428 <_svfiprintf_r+0x1d8>
 80043b6:	4b23      	ldr	r3, [pc, #140]	; (8004444 <_svfiprintf_r+0x1f4>)
 80043b8:	bb1b      	cbnz	r3, 8004402 <_svfiprintf_r+0x1b2>
 80043ba:	9b03      	ldr	r3, [sp, #12]
 80043bc:	3307      	adds	r3, #7
 80043be:	f023 0307 	bic.w	r3, r3, #7
 80043c2:	3308      	adds	r3, #8
 80043c4:	9303      	str	r3, [sp, #12]
 80043c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c8:	4433      	add	r3, r6
 80043ca:	9309      	str	r3, [sp, #36]	; 0x24
 80043cc:	e767      	b.n	800429e <_svfiprintf_r+0x4e>
 80043ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80043d2:	460c      	mov	r4, r1
 80043d4:	2001      	movs	r0, #1
 80043d6:	e7a5      	b.n	8004324 <_svfiprintf_r+0xd4>
 80043d8:	2300      	movs	r3, #0
 80043da:	3401      	adds	r4, #1
 80043dc:	9305      	str	r3, [sp, #20]
 80043de:	4619      	mov	r1, r3
 80043e0:	f04f 0c0a 	mov.w	ip, #10
 80043e4:	4620      	mov	r0, r4
 80043e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ea:	3a30      	subs	r2, #48	; 0x30
 80043ec:	2a09      	cmp	r2, #9
 80043ee:	d903      	bls.n	80043f8 <_svfiprintf_r+0x1a8>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0c5      	beq.n	8004380 <_svfiprintf_r+0x130>
 80043f4:	9105      	str	r1, [sp, #20]
 80043f6:	e7c3      	b.n	8004380 <_svfiprintf_r+0x130>
 80043f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043fc:	4604      	mov	r4, r0
 80043fe:	2301      	movs	r3, #1
 8004400:	e7f0      	b.n	80043e4 <_svfiprintf_r+0x194>
 8004402:	ab03      	add	r3, sp, #12
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	462a      	mov	r2, r5
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <_svfiprintf_r+0x1f8>)
 800440a:	a904      	add	r1, sp, #16
 800440c:	4638      	mov	r0, r7
 800440e:	f3af 8000 	nop.w
 8004412:	1c42      	adds	r2, r0, #1
 8004414:	4606      	mov	r6, r0
 8004416:	d1d6      	bne.n	80043c6 <_svfiprintf_r+0x176>
 8004418:	89ab      	ldrh	r3, [r5, #12]
 800441a:	065b      	lsls	r3, r3, #25
 800441c:	f53f af2c 	bmi.w	8004278 <_svfiprintf_r+0x28>
 8004420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004422:	b01d      	add	sp, #116	; 0x74
 8004424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004428:	ab03      	add	r3, sp, #12
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	462a      	mov	r2, r5
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <_svfiprintf_r+0x1f8>)
 8004430:	a904      	add	r1, sp, #16
 8004432:	4638      	mov	r0, r7
 8004434:	f000 f87a 	bl	800452c <_printf_i>
 8004438:	e7eb      	b.n	8004412 <_svfiprintf_r+0x1c2>
 800443a:	bf00      	nop
 800443c:	08004a58 	.word	0x08004a58
 8004440:	08004a62 	.word	0x08004a62
 8004444:	00000000 	.word	0x00000000
 8004448:	08004199 	.word	0x08004199
 800444c:	08004a5e 	.word	0x08004a5e

08004450 <_printf_common>:
 8004450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	4616      	mov	r6, r2
 8004456:	4699      	mov	r9, r3
 8004458:	688a      	ldr	r2, [r1, #8]
 800445a:	690b      	ldr	r3, [r1, #16]
 800445c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004460:	4293      	cmp	r3, r2
 8004462:	bfb8      	it	lt
 8004464:	4613      	movlt	r3, r2
 8004466:	6033      	str	r3, [r6, #0]
 8004468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800446c:	4607      	mov	r7, r0
 800446e:	460c      	mov	r4, r1
 8004470:	b10a      	cbz	r2, 8004476 <_printf_common+0x26>
 8004472:	3301      	adds	r3, #1
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	0699      	lsls	r1, r3, #26
 800447a:	bf42      	ittt	mi
 800447c:	6833      	ldrmi	r3, [r6, #0]
 800447e:	3302      	addmi	r3, #2
 8004480:	6033      	strmi	r3, [r6, #0]
 8004482:	6825      	ldr	r5, [r4, #0]
 8004484:	f015 0506 	ands.w	r5, r5, #6
 8004488:	d106      	bne.n	8004498 <_printf_common+0x48>
 800448a:	f104 0a19 	add.w	sl, r4, #25
 800448e:	68e3      	ldr	r3, [r4, #12]
 8004490:	6832      	ldr	r2, [r6, #0]
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	42ab      	cmp	r3, r5
 8004496:	dc26      	bgt.n	80044e6 <_printf_common+0x96>
 8004498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800449c:	1e13      	subs	r3, r2, #0
 800449e:	6822      	ldr	r2, [r4, #0]
 80044a0:	bf18      	it	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	0692      	lsls	r2, r2, #26
 80044a6:	d42b      	bmi.n	8004500 <_printf_common+0xb0>
 80044a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044ac:	4649      	mov	r1, r9
 80044ae:	4638      	mov	r0, r7
 80044b0:	47c0      	blx	r8
 80044b2:	3001      	adds	r0, #1
 80044b4:	d01e      	beq.n	80044f4 <_printf_common+0xa4>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	68e5      	ldr	r5, [r4, #12]
 80044ba:	6832      	ldr	r2, [r6, #0]
 80044bc:	f003 0306 	and.w	r3, r3, #6
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	bf08      	it	eq
 80044c4:	1aad      	subeq	r5, r5, r2
 80044c6:	68a3      	ldr	r3, [r4, #8]
 80044c8:	6922      	ldr	r2, [r4, #16]
 80044ca:	bf0c      	ite	eq
 80044cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044d0:	2500      	movne	r5, #0
 80044d2:	4293      	cmp	r3, r2
 80044d4:	bfc4      	itt	gt
 80044d6:	1a9b      	subgt	r3, r3, r2
 80044d8:	18ed      	addgt	r5, r5, r3
 80044da:	2600      	movs	r6, #0
 80044dc:	341a      	adds	r4, #26
 80044de:	42b5      	cmp	r5, r6
 80044e0:	d11a      	bne.n	8004518 <_printf_common+0xc8>
 80044e2:	2000      	movs	r0, #0
 80044e4:	e008      	b.n	80044f8 <_printf_common+0xa8>
 80044e6:	2301      	movs	r3, #1
 80044e8:	4652      	mov	r2, sl
 80044ea:	4649      	mov	r1, r9
 80044ec:	4638      	mov	r0, r7
 80044ee:	47c0      	blx	r8
 80044f0:	3001      	adds	r0, #1
 80044f2:	d103      	bne.n	80044fc <_printf_common+0xac>
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fc:	3501      	adds	r5, #1
 80044fe:	e7c6      	b.n	800448e <_printf_common+0x3e>
 8004500:	18e1      	adds	r1, r4, r3
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	2030      	movs	r0, #48	; 0x30
 8004506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800450a:	4422      	add	r2, r4
 800450c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004514:	3302      	adds	r3, #2
 8004516:	e7c7      	b.n	80044a8 <_printf_common+0x58>
 8004518:	2301      	movs	r3, #1
 800451a:	4622      	mov	r2, r4
 800451c:	4649      	mov	r1, r9
 800451e:	4638      	mov	r0, r7
 8004520:	47c0      	blx	r8
 8004522:	3001      	adds	r0, #1
 8004524:	d0e6      	beq.n	80044f4 <_printf_common+0xa4>
 8004526:	3601      	adds	r6, #1
 8004528:	e7d9      	b.n	80044de <_printf_common+0x8e>
	...

0800452c <_printf_i>:
 800452c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004530:	460c      	mov	r4, r1
 8004532:	4691      	mov	r9, r2
 8004534:	7e27      	ldrb	r7, [r4, #24]
 8004536:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004538:	2f78      	cmp	r7, #120	; 0x78
 800453a:	4680      	mov	r8, r0
 800453c:	469a      	mov	sl, r3
 800453e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004542:	d807      	bhi.n	8004554 <_printf_i+0x28>
 8004544:	2f62      	cmp	r7, #98	; 0x62
 8004546:	d80a      	bhi.n	800455e <_printf_i+0x32>
 8004548:	2f00      	cmp	r7, #0
 800454a:	f000 80d8 	beq.w	80046fe <_printf_i+0x1d2>
 800454e:	2f58      	cmp	r7, #88	; 0x58
 8004550:	f000 80a3 	beq.w	800469a <_printf_i+0x16e>
 8004554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800455c:	e03a      	b.n	80045d4 <_printf_i+0xa8>
 800455e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004562:	2b15      	cmp	r3, #21
 8004564:	d8f6      	bhi.n	8004554 <_printf_i+0x28>
 8004566:	a001      	add	r0, pc, #4	; (adr r0, 800456c <_printf_i+0x40>)
 8004568:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800456c:	080045c5 	.word	0x080045c5
 8004570:	080045d9 	.word	0x080045d9
 8004574:	08004555 	.word	0x08004555
 8004578:	08004555 	.word	0x08004555
 800457c:	08004555 	.word	0x08004555
 8004580:	08004555 	.word	0x08004555
 8004584:	080045d9 	.word	0x080045d9
 8004588:	08004555 	.word	0x08004555
 800458c:	08004555 	.word	0x08004555
 8004590:	08004555 	.word	0x08004555
 8004594:	08004555 	.word	0x08004555
 8004598:	080046e5 	.word	0x080046e5
 800459c:	08004609 	.word	0x08004609
 80045a0:	080046c7 	.word	0x080046c7
 80045a4:	08004555 	.word	0x08004555
 80045a8:	08004555 	.word	0x08004555
 80045ac:	08004707 	.word	0x08004707
 80045b0:	08004555 	.word	0x08004555
 80045b4:	08004609 	.word	0x08004609
 80045b8:	08004555 	.word	0x08004555
 80045bc:	08004555 	.word	0x08004555
 80045c0:	080046cf 	.word	0x080046cf
 80045c4:	680b      	ldr	r3, [r1, #0]
 80045c6:	1d1a      	adds	r2, r3, #4
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	600a      	str	r2, [r1, #0]
 80045cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0a3      	b.n	8004720 <_printf_i+0x1f4>
 80045d8:	6825      	ldr	r5, [r4, #0]
 80045da:	6808      	ldr	r0, [r1, #0]
 80045dc:	062e      	lsls	r6, r5, #24
 80045de:	f100 0304 	add.w	r3, r0, #4
 80045e2:	d50a      	bpl.n	80045fa <_printf_i+0xce>
 80045e4:	6805      	ldr	r5, [r0, #0]
 80045e6:	600b      	str	r3, [r1, #0]
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	da03      	bge.n	80045f4 <_printf_i+0xc8>
 80045ec:	232d      	movs	r3, #45	; 0x2d
 80045ee:	426d      	negs	r5, r5
 80045f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f4:	485e      	ldr	r0, [pc, #376]	; (8004770 <_printf_i+0x244>)
 80045f6:	230a      	movs	r3, #10
 80045f8:	e019      	b.n	800462e <_printf_i+0x102>
 80045fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045fe:	6805      	ldr	r5, [r0, #0]
 8004600:	600b      	str	r3, [r1, #0]
 8004602:	bf18      	it	ne
 8004604:	b22d      	sxthne	r5, r5
 8004606:	e7ef      	b.n	80045e8 <_printf_i+0xbc>
 8004608:	680b      	ldr	r3, [r1, #0]
 800460a:	6825      	ldr	r5, [r4, #0]
 800460c:	1d18      	adds	r0, r3, #4
 800460e:	6008      	str	r0, [r1, #0]
 8004610:	0628      	lsls	r0, r5, #24
 8004612:	d501      	bpl.n	8004618 <_printf_i+0xec>
 8004614:	681d      	ldr	r5, [r3, #0]
 8004616:	e002      	b.n	800461e <_printf_i+0xf2>
 8004618:	0669      	lsls	r1, r5, #25
 800461a:	d5fb      	bpl.n	8004614 <_printf_i+0xe8>
 800461c:	881d      	ldrh	r5, [r3, #0]
 800461e:	4854      	ldr	r0, [pc, #336]	; (8004770 <_printf_i+0x244>)
 8004620:	2f6f      	cmp	r7, #111	; 0x6f
 8004622:	bf0c      	ite	eq
 8004624:	2308      	moveq	r3, #8
 8004626:	230a      	movne	r3, #10
 8004628:	2100      	movs	r1, #0
 800462a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800462e:	6866      	ldr	r6, [r4, #4]
 8004630:	60a6      	str	r6, [r4, #8]
 8004632:	2e00      	cmp	r6, #0
 8004634:	bfa2      	ittt	ge
 8004636:	6821      	ldrge	r1, [r4, #0]
 8004638:	f021 0104 	bicge.w	r1, r1, #4
 800463c:	6021      	strge	r1, [r4, #0]
 800463e:	b90d      	cbnz	r5, 8004644 <_printf_i+0x118>
 8004640:	2e00      	cmp	r6, #0
 8004642:	d04d      	beq.n	80046e0 <_printf_i+0x1b4>
 8004644:	4616      	mov	r6, r2
 8004646:	fbb5 f1f3 	udiv	r1, r5, r3
 800464a:	fb03 5711 	mls	r7, r3, r1, r5
 800464e:	5dc7      	ldrb	r7, [r0, r7]
 8004650:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004654:	462f      	mov	r7, r5
 8004656:	42bb      	cmp	r3, r7
 8004658:	460d      	mov	r5, r1
 800465a:	d9f4      	bls.n	8004646 <_printf_i+0x11a>
 800465c:	2b08      	cmp	r3, #8
 800465e:	d10b      	bne.n	8004678 <_printf_i+0x14c>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	07df      	lsls	r7, r3, #31
 8004664:	d508      	bpl.n	8004678 <_printf_i+0x14c>
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	6861      	ldr	r1, [r4, #4]
 800466a:	4299      	cmp	r1, r3
 800466c:	bfde      	ittt	le
 800466e:	2330      	movle	r3, #48	; 0x30
 8004670:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004674:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004678:	1b92      	subs	r2, r2, r6
 800467a:	6122      	str	r2, [r4, #16]
 800467c:	f8cd a000 	str.w	sl, [sp]
 8004680:	464b      	mov	r3, r9
 8004682:	aa03      	add	r2, sp, #12
 8004684:	4621      	mov	r1, r4
 8004686:	4640      	mov	r0, r8
 8004688:	f7ff fee2 	bl	8004450 <_printf_common>
 800468c:	3001      	adds	r0, #1
 800468e:	d14c      	bne.n	800472a <_printf_i+0x1fe>
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	b004      	add	sp, #16
 8004696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469a:	4835      	ldr	r0, [pc, #212]	; (8004770 <_printf_i+0x244>)
 800469c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	680e      	ldr	r6, [r1, #0]
 80046a4:	061f      	lsls	r7, r3, #24
 80046a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80046aa:	600e      	str	r6, [r1, #0]
 80046ac:	d514      	bpl.n	80046d8 <_printf_i+0x1ac>
 80046ae:	07d9      	lsls	r1, r3, #31
 80046b0:	bf44      	itt	mi
 80046b2:	f043 0320 	orrmi.w	r3, r3, #32
 80046b6:	6023      	strmi	r3, [r4, #0]
 80046b8:	b91d      	cbnz	r5, 80046c2 <_printf_i+0x196>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f023 0320 	bic.w	r3, r3, #32
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	2310      	movs	r3, #16
 80046c4:	e7b0      	b.n	8004628 <_printf_i+0xfc>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	f043 0320 	orr.w	r3, r3, #32
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	2378      	movs	r3, #120	; 0x78
 80046d0:	4828      	ldr	r0, [pc, #160]	; (8004774 <_printf_i+0x248>)
 80046d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046d6:	e7e3      	b.n	80046a0 <_printf_i+0x174>
 80046d8:	065e      	lsls	r6, r3, #25
 80046da:	bf48      	it	mi
 80046dc:	b2ad      	uxthmi	r5, r5
 80046de:	e7e6      	b.n	80046ae <_printf_i+0x182>
 80046e0:	4616      	mov	r6, r2
 80046e2:	e7bb      	b.n	800465c <_printf_i+0x130>
 80046e4:	680b      	ldr	r3, [r1, #0]
 80046e6:	6826      	ldr	r6, [r4, #0]
 80046e8:	6960      	ldr	r0, [r4, #20]
 80046ea:	1d1d      	adds	r5, r3, #4
 80046ec:	600d      	str	r5, [r1, #0]
 80046ee:	0635      	lsls	r5, r6, #24
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	d501      	bpl.n	80046f8 <_printf_i+0x1cc>
 80046f4:	6018      	str	r0, [r3, #0]
 80046f6:	e002      	b.n	80046fe <_printf_i+0x1d2>
 80046f8:	0671      	lsls	r1, r6, #25
 80046fa:	d5fb      	bpl.n	80046f4 <_printf_i+0x1c8>
 80046fc:	8018      	strh	r0, [r3, #0]
 80046fe:	2300      	movs	r3, #0
 8004700:	6123      	str	r3, [r4, #16]
 8004702:	4616      	mov	r6, r2
 8004704:	e7ba      	b.n	800467c <_printf_i+0x150>
 8004706:	680b      	ldr	r3, [r1, #0]
 8004708:	1d1a      	adds	r2, r3, #4
 800470a:	600a      	str	r2, [r1, #0]
 800470c:	681e      	ldr	r6, [r3, #0]
 800470e:	6862      	ldr	r2, [r4, #4]
 8004710:	2100      	movs	r1, #0
 8004712:	4630      	mov	r0, r6
 8004714:	f7fb fd6c 	bl	80001f0 <memchr>
 8004718:	b108      	cbz	r0, 800471e <_printf_i+0x1f2>
 800471a:	1b80      	subs	r0, r0, r6
 800471c:	6060      	str	r0, [r4, #4]
 800471e:	6863      	ldr	r3, [r4, #4]
 8004720:	6123      	str	r3, [r4, #16]
 8004722:	2300      	movs	r3, #0
 8004724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004728:	e7a8      	b.n	800467c <_printf_i+0x150>
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	4632      	mov	r2, r6
 800472e:	4649      	mov	r1, r9
 8004730:	4640      	mov	r0, r8
 8004732:	47d0      	blx	sl
 8004734:	3001      	adds	r0, #1
 8004736:	d0ab      	beq.n	8004690 <_printf_i+0x164>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	079b      	lsls	r3, r3, #30
 800473c:	d413      	bmi.n	8004766 <_printf_i+0x23a>
 800473e:	68e0      	ldr	r0, [r4, #12]
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	4298      	cmp	r0, r3
 8004744:	bfb8      	it	lt
 8004746:	4618      	movlt	r0, r3
 8004748:	e7a4      	b.n	8004694 <_printf_i+0x168>
 800474a:	2301      	movs	r3, #1
 800474c:	4632      	mov	r2, r6
 800474e:	4649      	mov	r1, r9
 8004750:	4640      	mov	r0, r8
 8004752:	47d0      	blx	sl
 8004754:	3001      	adds	r0, #1
 8004756:	d09b      	beq.n	8004690 <_printf_i+0x164>
 8004758:	3501      	adds	r5, #1
 800475a:	68e3      	ldr	r3, [r4, #12]
 800475c:	9903      	ldr	r1, [sp, #12]
 800475e:	1a5b      	subs	r3, r3, r1
 8004760:	42ab      	cmp	r3, r5
 8004762:	dcf2      	bgt.n	800474a <_printf_i+0x21e>
 8004764:	e7eb      	b.n	800473e <_printf_i+0x212>
 8004766:	2500      	movs	r5, #0
 8004768:	f104 0619 	add.w	r6, r4, #25
 800476c:	e7f5      	b.n	800475a <_printf_i+0x22e>
 800476e:	bf00      	nop
 8004770:	08004a69 	.word	0x08004a69
 8004774:	08004a7a 	.word	0x08004a7a

08004778 <memcpy>:
 8004778:	440a      	add	r2, r1
 800477a:	4291      	cmp	r1, r2
 800477c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004780:	d100      	bne.n	8004784 <memcpy+0xc>
 8004782:	4770      	bx	lr
 8004784:	b510      	push	{r4, lr}
 8004786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800478a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800478e:	4291      	cmp	r1, r2
 8004790:	d1f9      	bne.n	8004786 <memcpy+0xe>
 8004792:	bd10      	pop	{r4, pc}

08004794 <memmove>:
 8004794:	4288      	cmp	r0, r1
 8004796:	b510      	push	{r4, lr}
 8004798:	eb01 0402 	add.w	r4, r1, r2
 800479c:	d902      	bls.n	80047a4 <memmove+0x10>
 800479e:	4284      	cmp	r4, r0
 80047a0:	4623      	mov	r3, r4
 80047a2:	d807      	bhi.n	80047b4 <memmove+0x20>
 80047a4:	1e43      	subs	r3, r0, #1
 80047a6:	42a1      	cmp	r1, r4
 80047a8:	d008      	beq.n	80047bc <memmove+0x28>
 80047aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047b2:	e7f8      	b.n	80047a6 <memmove+0x12>
 80047b4:	4402      	add	r2, r0
 80047b6:	4601      	mov	r1, r0
 80047b8:	428a      	cmp	r2, r1
 80047ba:	d100      	bne.n	80047be <memmove+0x2a>
 80047bc:	bd10      	pop	{r4, pc}
 80047be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047c6:	e7f7      	b.n	80047b8 <memmove+0x24>

080047c8 <_free_r>:
 80047c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ca:	2900      	cmp	r1, #0
 80047cc:	d048      	beq.n	8004860 <_free_r+0x98>
 80047ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d2:	9001      	str	r0, [sp, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f1a1 0404 	sub.w	r4, r1, #4
 80047da:	bfb8      	it	lt
 80047dc:	18e4      	addlt	r4, r4, r3
 80047de:	f000 f8d3 	bl	8004988 <__malloc_lock>
 80047e2:	4a20      	ldr	r2, [pc, #128]	; (8004864 <_free_r+0x9c>)
 80047e4:	9801      	ldr	r0, [sp, #4]
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	4615      	mov	r5, r2
 80047ea:	b933      	cbnz	r3, 80047fa <_free_r+0x32>
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6014      	str	r4, [r2, #0]
 80047f0:	b003      	add	sp, #12
 80047f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047f6:	f000 b8cd 	b.w	8004994 <__malloc_unlock>
 80047fa:	42a3      	cmp	r3, r4
 80047fc:	d90b      	bls.n	8004816 <_free_r+0x4e>
 80047fe:	6821      	ldr	r1, [r4, #0]
 8004800:	1862      	adds	r2, r4, r1
 8004802:	4293      	cmp	r3, r2
 8004804:	bf04      	itt	eq
 8004806:	681a      	ldreq	r2, [r3, #0]
 8004808:	685b      	ldreq	r3, [r3, #4]
 800480a:	6063      	str	r3, [r4, #4]
 800480c:	bf04      	itt	eq
 800480e:	1852      	addeq	r2, r2, r1
 8004810:	6022      	streq	r2, [r4, #0]
 8004812:	602c      	str	r4, [r5, #0]
 8004814:	e7ec      	b.n	80047f0 <_free_r+0x28>
 8004816:	461a      	mov	r2, r3
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b10b      	cbz	r3, 8004820 <_free_r+0x58>
 800481c:	42a3      	cmp	r3, r4
 800481e:	d9fa      	bls.n	8004816 <_free_r+0x4e>
 8004820:	6811      	ldr	r1, [r2, #0]
 8004822:	1855      	adds	r5, r2, r1
 8004824:	42a5      	cmp	r5, r4
 8004826:	d10b      	bne.n	8004840 <_free_r+0x78>
 8004828:	6824      	ldr	r4, [r4, #0]
 800482a:	4421      	add	r1, r4
 800482c:	1854      	adds	r4, r2, r1
 800482e:	42a3      	cmp	r3, r4
 8004830:	6011      	str	r1, [r2, #0]
 8004832:	d1dd      	bne.n	80047f0 <_free_r+0x28>
 8004834:	681c      	ldr	r4, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	6053      	str	r3, [r2, #4]
 800483a:	4421      	add	r1, r4
 800483c:	6011      	str	r1, [r2, #0]
 800483e:	e7d7      	b.n	80047f0 <_free_r+0x28>
 8004840:	d902      	bls.n	8004848 <_free_r+0x80>
 8004842:	230c      	movs	r3, #12
 8004844:	6003      	str	r3, [r0, #0]
 8004846:	e7d3      	b.n	80047f0 <_free_r+0x28>
 8004848:	6825      	ldr	r5, [r4, #0]
 800484a:	1961      	adds	r1, r4, r5
 800484c:	428b      	cmp	r3, r1
 800484e:	bf04      	itt	eq
 8004850:	6819      	ldreq	r1, [r3, #0]
 8004852:	685b      	ldreq	r3, [r3, #4]
 8004854:	6063      	str	r3, [r4, #4]
 8004856:	bf04      	itt	eq
 8004858:	1949      	addeq	r1, r1, r5
 800485a:	6021      	streq	r1, [r4, #0]
 800485c:	6054      	str	r4, [r2, #4]
 800485e:	e7c7      	b.n	80047f0 <_free_r+0x28>
 8004860:	b003      	add	sp, #12
 8004862:	bd30      	pop	{r4, r5, pc}
 8004864:	20000090 	.word	0x20000090

08004868 <_malloc_r>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	1ccd      	adds	r5, r1, #3
 800486c:	f025 0503 	bic.w	r5, r5, #3
 8004870:	3508      	adds	r5, #8
 8004872:	2d0c      	cmp	r5, #12
 8004874:	bf38      	it	cc
 8004876:	250c      	movcc	r5, #12
 8004878:	2d00      	cmp	r5, #0
 800487a:	4606      	mov	r6, r0
 800487c:	db01      	blt.n	8004882 <_malloc_r+0x1a>
 800487e:	42a9      	cmp	r1, r5
 8004880:	d903      	bls.n	800488a <_malloc_r+0x22>
 8004882:	230c      	movs	r3, #12
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	2000      	movs	r0, #0
 8004888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800488a:	f000 f87d 	bl	8004988 <__malloc_lock>
 800488e:	4921      	ldr	r1, [pc, #132]	; (8004914 <_malloc_r+0xac>)
 8004890:	680a      	ldr	r2, [r1, #0]
 8004892:	4614      	mov	r4, r2
 8004894:	b99c      	cbnz	r4, 80048be <_malloc_r+0x56>
 8004896:	4f20      	ldr	r7, [pc, #128]	; (8004918 <_malloc_r+0xb0>)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b923      	cbnz	r3, 80048a6 <_malloc_r+0x3e>
 800489c:	4621      	mov	r1, r4
 800489e:	4630      	mov	r0, r6
 80048a0:	f000 f862 	bl	8004968 <_sbrk_r>
 80048a4:	6038      	str	r0, [r7, #0]
 80048a6:	4629      	mov	r1, r5
 80048a8:	4630      	mov	r0, r6
 80048aa:	f000 f85d 	bl	8004968 <_sbrk_r>
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	d123      	bne.n	80048fa <_malloc_r+0x92>
 80048b2:	230c      	movs	r3, #12
 80048b4:	6033      	str	r3, [r6, #0]
 80048b6:	4630      	mov	r0, r6
 80048b8:	f000 f86c 	bl	8004994 <__malloc_unlock>
 80048bc:	e7e3      	b.n	8004886 <_malloc_r+0x1e>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	1b5b      	subs	r3, r3, r5
 80048c2:	d417      	bmi.n	80048f4 <_malloc_r+0x8c>
 80048c4:	2b0b      	cmp	r3, #11
 80048c6:	d903      	bls.n	80048d0 <_malloc_r+0x68>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	441c      	add	r4, r3
 80048cc:	6025      	str	r5, [r4, #0]
 80048ce:	e004      	b.n	80048da <_malloc_r+0x72>
 80048d0:	6863      	ldr	r3, [r4, #4]
 80048d2:	42a2      	cmp	r2, r4
 80048d4:	bf0c      	ite	eq
 80048d6:	600b      	streq	r3, [r1, #0]
 80048d8:	6053      	strne	r3, [r2, #4]
 80048da:	4630      	mov	r0, r6
 80048dc:	f000 f85a 	bl	8004994 <__malloc_unlock>
 80048e0:	f104 000b 	add.w	r0, r4, #11
 80048e4:	1d23      	adds	r3, r4, #4
 80048e6:	f020 0007 	bic.w	r0, r0, #7
 80048ea:	1ac2      	subs	r2, r0, r3
 80048ec:	d0cc      	beq.n	8004888 <_malloc_r+0x20>
 80048ee:	1a1b      	subs	r3, r3, r0
 80048f0:	50a3      	str	r3, [r4, r2]
 80048f2:	e7c9      	b.n	8004888 <_malloc_r+0x20>
 80048f4:	4622      	mov	r2, r4
 80048f6:	6864      	ldr	r4, [r4, #4]
 80048f8:	e7cc      	b.n	8004894 <_malloc_r+0x2c>
 80048fa:	1cc4      	adds	r4, r0, #3
 80048fc:	f024 0403 	bic.w	r4, r4, #3
 8004900:	42a0      	cmp	r0, r4
 8004902:	d0e3      	beq.n	80048cc <_malloc_r+0x64>
 8004904:	1a21      	subs	r1, r4, r0
 8004906:	4630      	mov	r0, r6
 8004908:	f000 f82e 	bl	8004968 <_sbrk_r>
 800490c:	3001      	adds	r0, #1
 800490e:	d1dd      	bne.n	80048cc <_malloc_r+0x64>
 8004910:	e7cf      	b.n	80048b2 <_malloc_r+0x4a>
 8004912:	bf00      	nop
 8004914:	20000090 	.word	0x20000090
 8004918:	20000094 	.word	0x20000094

0800491c <_realloc_r>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	4607      	mov	r7, r0
 8004920:	4614      	mov	r4, r2
 8004922:	460e      	mov	r6, r1
 8004924:	b921      	cbnz	r1, 8004930 <_realloc_r+0x14>
 8004926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800492a:	4611      	mov	r1, r2
 800492c:	f7ff bf9c 	b.w	8004868 <_malloc_r>
 8004930:	b922      	cbnz	r2, 800493c <_realloc_r+0x20>
 8004932:	f7ff ff49 	bl	80047c8 <_free_r>
 8004936:	4625      	mov	r5, r4
 8004938:	4628      	mov	r0, r5
 800493a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800493c:	f000 f830 	bl	80049a0 <_malloc_usable_size_r>
 8004940:	42a0      	cmp	r0, r4
 8004942:	d20f      	bcs.n	8004964 <_realloc_r+0x48>
 8004944:	4621      	mov	r1, r4
 8004946:	4638      	mov	r0, r7
 8004948:	f7ff ff8e 	bl	8004868 <_malloc_r>
 800494c:	4605      	mov	r5, r0
 800494e:	2800      	cmp	r0, #0
 8004950:	d0f2      	beq.n	8004938 <_realloc_r+0x1c>
 8004952:	4631      	mov	r1, r6
 8004954:	4622      	mov	r2, r4
 8004956:	f7ff ff0f 	bl	8004778 <memcpy>
 800495a:	4631      	mov	r1, r6
 800495c:	4638      	mov	r0, r7
 800495e:	f7ff ff33 	bl	80047c8 <_free_r>
 8004962:	e7e9      	b.n	8004938 <_realloc_r+0x1c>
 8004964:	4635      	mov	r5, r6
 8004966:	e7e7      	b.n	8004938 <_realloc_r+0x1c>

08004968 <_sbrk_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4d06      	ldr	r5, [pc, #24]	; (8004984 <_sbrk_r+0x1c>)
 800496c:	2300      	movs	r3, #0
 800496e:	4604      	mov	r4, r0
 8004970:	4608      	mov	r0, r1
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	f7fc fed6 	bl	8001724 <_sbrk>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_sbrk_r+0x1a>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	b103      	cbz	r3, 8004982 <_sbrk_r+0x1a>
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	20000184 	.word	0x20000184

08004988 <__malloc_lock>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__malloc_lock+0x8>)
 800498a:	f000 b811 	b.w	80049b0 <__retarget_lock_acquire_recursive>
 800498e:	bf00      	nop
 8004990:	2000018c 	.word	0x2000018c

08004994 <__malloc_unlock>:
 8004994:	4801      	ldr	r0, [pc, #4]	; (800499c <__malloc_unlock+0x8>)
 8004996:	f000 b80c 	b.w	80049b2 <__retarget_lock_release_recursive>
 800499a:	bf00      	nop
 800499c:	2000018c 	.word	0x2000018c

080049a0 <_malloc_usable_size_r>:
 80049a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a4:	1f18      	subs	r0, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bfbc      	itt	lt
 80049aa:	580b      	ldrlt	r3, [r1, r0]
 80049ac:	18c0      	addlt	r0, r0, r3
 80049ae:	4770      	bx	lr

080049b0 <__retarget_lock_acquire_recursive>:
 80049b0:	4770      	bx	lr

080049b2 <__retarget_lock_release_recursive>:
 80049b2:	4770      	bx	lr

080049b4 <_init>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	bf00      	nop
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr

080049c0 <_fini>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr
